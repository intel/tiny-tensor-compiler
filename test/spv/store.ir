; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc -gspirv -S -O0 < %s | filecheck %s

; CHECK: OpCapability AtomicFloat32AddEXT
; CHECK: OpCapability AtomicFloat64AddEXT
; CHECK: OpExtension "SPV_EXT_shader_atomic_float_add"
; CHECK: %[[#I8:]] = OpTypeInt 8 0
; CHECK: %[[#PTR_I8:]] = OpTypePointer CrossWorkgroup %[[#I8]]
; CHECK: %[[#I64:]] = OpTypeInt 64 0
; CHECK: %[[#I64_C4:]] = OpConstant %[[#I64]] 4
; CHECK: %[[#I64_C1:]] = OpConstant %[[#I64]] 1
; CHECK: %[[#I64_C0:]] = OpConstant %[[#I64]] 0
; CHECK: %[[#I8_C214:]] = OpConstant %[[#I8]] 214
; CHECK: %[[#INDEX_NULL:]] = OpConstantNull %[[#I64]]
; CHECK: %[[#I32:]] = OpTypeInt 32 0
; CHECK: %[[#I32_C2:]] = OpConstant %[[#I32]] 2
; CHECK: %[[#I32_C0:]] = OpConstant %[[#I32]] 0
; CHECK: %[[#F32:]] = OpTypeFloat 32
; CHECK: %[[#PTR_F32:]] = OpTypePointer CrossWorkgroup %[[#F32]]
; CHECK: %[[#F32_C42:]] = OpConstant %[[#F32]] 0x1.5p+5
; CHECK: %[[#F64:]] = OpTypeFloat 64
; CHECK: %[[#C64:]] = OpTypeVector %[[#F64]] 2
; CHECK: %[[#PTR_C64:]] = OpTypePointer CrossWorkgroup %[[#C64]]
; CHECK: %[[#F64_C42:]] = OpConstant %[[#F64]] 0x1.5p+5
; CHECK: %[[#F64_C1:]] = OpConstant %[[#F64]] 0x1p+0
; CHECK: %[[#C64_C42_1:]] = OpConstantComposite %[[#C64]] %[[#F64_C42]] %[[#F64_C1]]
; CHECK: %[[#PTR_F64:]] = OpTypePointer CrossWorkgroup %[[#F64]]
; CHECK: %[[#I32_C1:]] = OpConstant %[[#I32]] 1

func @si8(%0: memref<i8x4x4>, %1: memref<i8>) {
    %2 = constant 0 : index
    %3 = constant -42 : i8
    store %3, %0[%2,%2] : memref<i8x4x4>
    store.atomic %3, %1[] : memref<i8>
    store.atomic_add %3, %1[] : memref<i8>
; CHECK:                  %[[#]] = OpFunction {{.*}}
; CHECK-NEXT:     %[[#SI8_MR1:]] = OpFunctionParameter %[[#PTR_I8]]
; CHECK-NEXT:     %[[#SI8_MR2:]] = OpFunctionParameter %[[#PTR_I8]]
; CHECK:         %[[#SI8_TMP1:]] = OpIMul %[[#I64]] %[[#I64_C0]] %[[#I64_C1]]
; CHECK-NEXT: %[[#SI8_OFFSET1:]] = OpIAdd %[[#I64]] %[[#INDEX_NULL]] %[[#SI8_TMP1]]
; CHECK-NEXT:    %[[#SI8_TMP2:]] = OpIMul %[[#I64]] %[[#I64_C0]] %[[#I64_C4]]
; CHECK-NEXT: %[[#SI8_OFFSET2:]] = OpIAdd %[[#I64]] %[[#SI8_OFFSET1]] %[[#SI8_TMP2]]
; CHECK-NEXT:  %[[#SI8_MR1SUB:]] = OpInBoundsPtrAccessChain %[[#PTR_I8]] %[[#SI8_MR1]] %[[#SI8_OFFSET2]]
; CHECK-NEXT:                      OpStore %[[#SI8_MR1SUB]] %[[#I8_C214]]
; CHECK:                           OpAtomicStore %[[#SI8_MR2]] %[[#I32_C2]] %[[#I32_C0]] %[[#I8_C214]]
; CHECK:                  %[[#]] = OpAtomicIAdd %[[#I8]] %[[#SI8_MR2]] %[[#I32_C2]] %[[#I32_C0]] %[[#I8_C214]]
}

func @sf32(%0: memref<f32>) {
    %1 = constant 42.0 : f32
    store.atomic %1, %0[] : memref<f32>
    store.atomic_add %1, %0[] : memref<f32>
; CHECK:                  %[[#]] = OpFunction {{.*}}
; CHECK-NEXT:     %[[#SF32_MR:]] = OpFunctionParameter %[[#PTR_F32]]
; CHECK:                           OpAtomicStore %[[#SF32_MR]] %[[#I32_C2]] %[[#I32_C0]] %[[#F32_C42]]
; CHECK:                  %[[#]] = OpAtomicFAddEXT %[[#F32]] %[[#SF32_MR]] %[[#I32_C2]] %[[#I32_C0]] %[[#F32_C42]]
}

func @sc64(%0: memref<c64>) {
    %1 = constant [42.0, 1.0] : c64
    store.atomic %1, %0[] : memref<c64>
    store.atomic_add %1, %0[] : memref<c64>
; CHECK:                  %[[#]] = OpFunction {{.*}}
; CHECK-NEXT:     %[[#SC64_MR:]] = OpFunctionParameter %[[#PTR_C64]]
; CHECK:              %[[#SC64_RE_PTR1:]] = OpInBoundsAccessChain %[[#PTR_F64]] %[[#SC64_MR]] %[[#I32_C0]]
; CHECK-NEXT:         %[[#SC64_IM_PTR1:]] = OpInBoundsAccessChain %[[#PTR_F64]] %[[#SC64_MR]] %[[#I32_C1]]
; CHECK-NEXT:         %[[#SC64_RE_VAL1:]] = OpCompositeExtract %[[#F64]] %[[#C64_C42_1]] 0
; CHECK-NEXT:         %[[#SC64_IM_VAL1:]] = OpCompositeExtract %[[#F64]] %[[#C64_C42_1]] 1
; CHECK-NEXT:               OpAtomicStore %[[#SC64_RE_PTR1]] %[[#I32_C2]] %[[#I32_C0]] %[[#SC64_RE_VAL1]]
; CHECK-NEXT:               OpAtomicStore %[[#SC64_IM_PTR1]] %[[#I32_C2]] %[[#I32_C0]] %[[#SC64_IM_VAL1]]
; CHECK:              %[[#SC64_RE_PTR2:]] = OpInBoundsAccessChain %[[#PTR_F64]] %[[#SC64_MR]] %[[#I32_C0]]
; CHECK-NEXT:         %[[#SC64_IM_PTR2:]] = OpInBoundsAccessChain %[[#PTR_F64]] %[[#SC64_MR]] %[[#I32_C1]]
; CHECK-NEXT:         %[[#SC64_RE_VAL2:]] = OpCompositeExtract %[[#F64]] %[[#C64_C42_1]] 0
; CHECK-NEXT:         %[[#SC64_IM_VAL2:]] = OpCompositeExtract %[[#F64]] %[[#C64_C42_1]] 1
; CHECK-NEXT:         %[[#]] = OpAtomicFAddEXT %[[#F64]] %[[#SC64_RE_PTR2]] %[[#I32_C2]] %[[#I32_C0]] %[[#SC64_RE_VAL2]]
; CHECK-NEXT:         %[[#]] = OpAtomicFAddEXT %[[#F64]] %[[#SC64_IM_PTR2]] %[[#I32_C2]] %[[#I32_C0]] %[[#SC64_IM_VAL2]]
}
