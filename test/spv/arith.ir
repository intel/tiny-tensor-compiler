; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc -S -O0 < %s | filecheck %s

; CHECK: OpCapability Int64
; CHECK: %[[#BOOL:]] = OpTypeBool
; CHECK: %[[#I64:]] = OpTypeInt 64 0
; CHECK: %[[#F32:]] = OpTypeFloat 32
; CHECK: %[[#F16:]] = OpTypeFloat 16
; CHECK: %[[#C32:]] = OpTypeVector %[[#F32]] 2

func @tbool(%a: bool, %b: bool) {
    %0 = arith.and %a, %b : bool
    %1 = arith.or %a, %b : bool
    %2 = arith.xor %a, %b : bool
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      %[[#]] = OpLogicalAnd %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpLogicalOr %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpLogicalNotEqual %[[#BOOL]] %[[#]] %[[#]]
}

func @tint(%a: i64, %b: i64) {
    %0 = arith.add %a, %b : i64
    %1 = arith.sub %a, %b : i64
    %2 = arith.mul %a, %b : i64
    %3 = arith.div %a, %b : i64
    %4 = arith.rem %a, %b : i64
    %5 = arith.shl %a, %b : i64
    %6 = arith.shr %a, %b : i64
    %7 = arith.and %a, %b : i64
    %8 = arith.or %a, %b : i64
    %9 = arith.xor %a, %b : i64
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      %[[#]] = OpIAdd %[[#I64]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpISub %[[#I64]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpIMul %[[#I64]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpSDiv %[[#I64]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpSRem %[[#I64]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpShiftLeftLogical %[[#I64]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpShiftRightArithmetic %[[#I64]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpBitwiseAnd %[[#I64]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpBitwiseOr %[[#I64]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpBitwiseXor %[[#I64]] %[[#]] %[[#]]
}

func @tfloat(%a: f32, %b: f32) {
    %0 = arith.add %a, %b : f32
    %1 = arith.sub %a, %b : f32
    %2 = arith.mul %a, %b : f32
    %3 = arith.div %a, %b : f32
    %4 = arith.rem %a, %b : f32
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      %[[#]] = OpFAdd %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFSub %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFMul %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFDiv %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFRem %[[#F32]] %[[#]] %[[#]]
}

func @thalf(%a: f16, %b: f16) {
    %0 = arith.add %a, %b : f16
    %1 = arith.sub %a, %b : f16
    %2 = arith.mul %a, %b : f16
    %3 = arith.div %a, %b : f16
    %4 = arith.rem %a, %b : f16
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      %[[#]] = OpFAdd %[[#F16]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFSub %[[#F16]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFMul %[[#F16]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFDiv %[[#F16]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFRem %[[#F16]] %[[#]] %[[#]]
}

func @tcomplex(%a: c32, %b: c32) {
    %0 = arith.add %a, %b : c32
    %1 = arith.sub %a, %b : c32
    %2 = arith.mul %a, %b : c32
    %3 = arith.div %a, %b : c32
; CHECK-LABEL:                        %[[#]] = OpFunction {{.*}}
; CHECK-NEXT:                    %[[#TC_A:]] = OpFunctionParameter %[[#C32]]
; CHECK-NEXT:                    %[[#TC_B:]] = OpFunctionParameter %[[#C32]]
; CHECK:                              %[[#]] = OpFAdd %[[#C32]] %[[#TC_A]] %[[#TC_B]]
; CHECK-NEXT:                         %[[#]] = OpFSub %[[#C32]] %[[#TC_A]] %[[#TC_B]]
; CHECK-NEXT:                %[[#TC_NEG_A:]] = OpFNegate %[[#C32]] %[[#TC_A]]
; CHECK-NEXT:            %[[#TC_A_TIMES_I:]] = OpVectorShuffle %[[#C32]] %[[#TC_NEG_A]] %[[#TC_A]] 1 2
; CHECK-NEXT:                  %[[#TC_B_1:]] = OpVectorShuffle %[[#C32]] %[[#TC_B]] %[[#TC_B]] 1 1
; CHECK-NEXT:        %[[#TC_B_1_A_TIMES_I:]] = OpFMul %[[#C32]] %[[#TC_B_1]] %[[#TC_A_TIMES_I]]
; CHECK-NEXT:                  %[[#TC_B_0:]] = OpVectorShuffle %[[#C32]] %[[#TC_B]] %[[#TC_B]] 0 0
; CHECK-NEXT:                         %[[#]] = OpExtInst %[[#C32]] %[[#]] fma %[[#TC_A]] %[[#TC_B_0]] %[[#TC_B_1_A_TIMES_I]]
; CHECK-NEXT:              %[[#TC_NEG_A_2:]] = OpFNegate %[[#C32]] %[[#TC_A]]
; CHECK-NEXT:       %[[#TC_A_TIMES_CONJ_I:]] = OpVectorShuffle %[[#C32]] %[[#TC_A]] %[[#TC_NEG_A_2]] 1 2
; CHECK-NEXT:                %[[#TC_B_1_2:]] = OpVectorShuffle %[[#C32]] %[[#TC_B]] %[[#TC_B]] 1 1
; CHECK-NEXT: %[[#TC_B_1_2_A_TIMES_CONJ_I:]] = OpFMul %[[#C32]] %[[#TC_B_1_2]] %[[#TC_A_TIMES_CONJ_I]]
; CHECK-NEXT:                %[[#TC_B_0_2:]] = OpVectorShuffle %[[#C32]] %[[#TC_B]] %[[#TC_B]] 0 0
; CHECK-NEXT:       %[[#TC_A_TIMES_CONJ_B:]] = OpExtInst %[[#C32]] %1 fma %[[#TC_A]] %[[#TC_B_0_2]] %[[#TC_B_1_2_A_TIMES_CONJ_I]]
; CHECK-NEXT:            %[[#TC_B_SQUARED:]] = OpFMul %[[#C32]] %[[#TC_B]] %[[#TC_B]]
; CHECK-NEXT:          %[[#TC_B_SQUARED_0:]] = OpCompositeExtract %[[#F32]] %[[#TC_B_SQUARED]] 0
; CHECK-NEXT:          %[[#TC_B_SQUARED_1:]] = OpCompositeExtract %[[#F32]] %[[#TC_B_SQUARED]] 1
; CHECK-NEXT:                %[[#TC_B_ABS:]] = OpFAdd %[[#F32]] %[[#TC_B_SQUARED_0]] %[[#TC_B_SQUARED_1]]
; CHECK-NEXT:                %[[#TC_DUMMY:]] = OpUndef %[[#C32]]
; CHECK-NEXT:              %[[#TC_B_ABS_1:]] = OpCompositeInsert %[[#C32]] %[[#TC_B_ABS]] %[[#TC_DUMMY]] 0
; CHECK-NEXT:              %[[#TC_B_ABS_2:]] = OpVectorShuffle %[[#C32]] %[[#TC_B_ABS_1]] %[[#TC_DUMMY]] 0 0
; CHECK-NEXT:                         %[[#]] = OpFDiv %[[#C32]] %[[#TC_A_TIMES_CONJ_B]] %[[#TC_B_ABS_2]]
}

func @tfloatcoopmatrix() subgroup_size(16) {
    %0 = constant 1.0 : coopmatrix<f32x16x4,matrix_a>
    %1 = constant 2.0 : coopmatrix<f32x16x4,matrix_a>
    %2 = arith.add %0, %1 : coopmatrix<f32x16x4,matrix_a>
    %3 = arith.sub %0, %1 : coopmatrix<f32x16x4,matrix_a>
    %4 = arith.mul %0, %1 : coopmatrix<f32x16x4,matrix_a>
    %5 = arith.div %0, %1 : coopmatrix<f32x16x4,matrix_a>
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      %[[#]] = OpFAdd %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFAdd %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFAdd %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFAdd %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFSub %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFSub %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFSub %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFSub %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFMul %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFMul %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFMul %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFMul %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFDiv %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFDiv %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFDiv %[[#F32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFDiv %[[#F32]] %[[#]] %[[#]]
}
