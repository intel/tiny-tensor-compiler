; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc -gspirv -S -O0 < %s | filecheck %s

; CHECK: %[[#BOOL:]] = OpTypeBool
; CHECK: %[[#BOOL2:]] = OpTypeVector %[[#BOOL]] 2

func @tint(%a: i64, %b: i64) {
    %0 = cmp.eq %a, %b : i64
    %1 = cmp.ne %a, %b : i64
    %2 = cmp.gt %a, %b : i64
    %3 = cmp.ge %a, %b : i64
    %4 = cmp.lt %a, %b : i64
    %5 = cmp.le %a, %b : i64
; CHECK:      %[[#]] = OpIEqual %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpINotEqual %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpSGreaterThan %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpSGreaterThanEqual %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpSLessThan %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpSLessThanEqual %[[#BOOL]] %[[#]] %[[#]]
}

func @tfloat(%a: f32, %b: f32) {
    %0 = cmp.eq %a, %b : f32
    %1 = cmp.ne %a, %b : f32
    %2 = cmp.gt %a, %b : f32
    %3 = cmp.ge %a, %b : f32
    %4 = cmp.lt %a, %b : f32
    %5 = cmp.le %a, %b : f32
; CHECK:      %[[#]] = OpFOrdEqual %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFUnordNotEqual %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFOrdGreaterThan %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFOrdGreaterThanEqual %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFOrdLessThan %[[#BOOL]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpFOrdLessThanEqual %[[#BOOL]] %[[#]] %[[#]]
}

func @tcomplex(%a: c32, %b: c32) {
    %0 = cmp.eq %a, %b : c32
    %1 = cmp.ne %a, %b : c32
; CHECK:      %[[#COMPONENTS_EQUAL:]] = OpFOrdEqual %[[#BOOL2]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpAll %[[#BOOL]] %[[#COMPONENTS_EQUAL]]
; CHECK-NEXT: %[[#COMPONENTS_NOT_EQUAL:]] = OpFUnordNotEqual %[[#BOOL2]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#]] = OpAll %[[#BOOL]] %[[#COMPONENTS_NOT_EQUAL]]
}
