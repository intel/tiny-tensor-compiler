; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-opt -pconstant-propagation -fno-unsafe-fp-math < %s | filecheck %s

func @identity_iadd(%a: i32) {
    %c0 = constant 0 : i32
    %0 = add %a, %c0 : i32
    %1 = add %c0, %a : i32
    %2 = add %0, %1 : i32
; CHECK-LABEL: func @identity_iadd({{.*}}
; CHECK: %2 = add %a, %a : i32
}

func @identity_isub(%a: i32) {
    %c0 = constant 0 : i32
    %0 = sub %a, %c0 : i32
    %1 = sub %c0, %a : i32
    %2 = add %0, %1 : i32
; CHECK-LABEL: func @identity_isub({{.*}}
; CHECK: %2 = add %a, %1 : i32
}

func @identity_imul0(%a: i32) {
    %c0 = constant 0 : i32
    %0 = mul %a, %c0 : i32
    %1 = mul %c0, %a : i32
; CHECK-LABEL: func @identity_imul0({{.*}}
; CHECK:       %0 = constant 0 : i32
; CHECK-NEXT:  %1 = mul %a, %c0 : i32
; CHECK-NEXT:  %2 = constant 0 : i32
; CHECK-NEXT:  %3 = mul %c0, %a : i32
}

func @identity_imul1(%a: i32) {
    %c1 = constant 1 : i32
    %0 = mul %a, %c1 : i32
    %1 = mul %c1, %a : i32
    %2 = mul %0, %1 : i32
; CHECK-LABEL: func @identity_imul1({{.*}}
; CHECK:       %2 = mul %a, %a : i32
}

func @identity_idiv(%a: i32) {
    %c1 = constant 1 : i32
    %0 = div %a, %c1 : i32
    %1 = div %c1, %a : i32
    %2 = mul %0, %1 : i32
; CHECK-LABEL: func @identity_idiv({{.*}}
; CHECK:       %2 = mul %a, %1 : i32
}

func @identity_irem(%a: i32) {
    %c1 = constant 1 : i32
    %0 = rem %a, %c1 : i32
    %1 = rem %c1, %a : i32
    %2 = mul %0, %1 : i32
; CHECK-LABEL: func @identity_irem({{.*}}
; CHECK:       %0 = constant 0 : i32
; CHECK:       %4 = mul %0, %2 : i32
}

func @identity_ishl(%a: i32) {
    %c0 = constant 0 : i32
    %0 = shl %a, %c0 : i32
    %1 = shl %c0, %a : i32
    %2 = add %0, %1 : i32
; CHECK-LABEL: func @identity_ishl({{.*}}
; CHECK:       %1 = constant 0 : i32
; CHECK:       %3 = add %a, %1 : i32
}

func @identity_ishr(%a: i32) {
    %c0 = constant 0 : i32
    %0 = shr %a, %c0 : i32
    %1 = shr %c0, %a : i32
    %2 = add %0, %1 : i32
; CHECK-LABEL: func @identity_ishr({{.*}}
; CHECK:       %1 = constant 0 : i32
; CHECK:       %3 = add %a, %1 : i32
}

func @identity_iand(%a: i32) {
    %c0 = constant 0 : i32
    %0 = and %a, %c0 : i32
    %1 = and %c0, %a : i32
    %2 = add %0, %1 : i32
; CHECK-LABEL: func @identity_iand({{.*}}
; CHECK:       %0 = constant 0 : i32
; CHECK:       %2 = constant 0 : i32
; CHECK:       %5 = add %0, %2 : i32
}

func @identity_ior(%a: i32) {
    %c0 = constant 0 : i32
    %0 = or %a, %c0 : i32
    %1 = or %c0, %a : i32
    %2 = add %0, %1 : i32
; CHECK-LABEL: func @identity_ior({{.*}}
; CHECK:       %2 = add %a, %a : i32
}

func @identity_ixor(%a: i32) {
    %c0 = constant 0 : i32
    %0 = xor %a, %c0 : i32
    %1 = xor %c0, %a : i32
    %2 = add %0, %1 : i32
; CHECK-LABEL: func @identity_ixor({{.*}}
; CHECK:       %2 = add %a, %a : i32
}

func @identity_band(%a: bool) {
    %c0 = constant false : bool
    %0 = and %a, %c0 : bool
    %1 = and %c0, %a : bool
    %2 = and %0, %1 : bool
; CHECK-LABEL: func @identity_band({{.*}}
; CHECK:       %0 = constant false : bool
; CHECK:       %2 = constant false : bool
; CHECK:       %5 = and %0, %2 : bool
}

func @identity_bor(%a: bool) {
    %c0 = constant false : bool
    %0 = or %a, %c0 : bool
    %1 = or %c0, %a : bool
    %2 = and %0, %1 : bool
; CHECK-LABEL: func @identity_bor({{.*}}
; CHECK:       %2 = and %a, %a : bool
}

func @identity_bxor(%a: bool) {
    %c0 = constant false : bool
    %0 = xor %a, %c0 : bool
    %1 = xor %c0, %a : bool
    %2 = and %0, %1 : bool
; CHECK-LABEL: func @identity_bxor({{.*}}
; CHECK:       %2 = and %a, %a : bool
}
