; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc -S -O0 < %s | filecheck %s

; CHECK: %[[#I32:]] = OpTypeInt 32 0
; CHECK: %[[#BOOL:]] = OpTypeBool
; CHECK: %[[#BOOL_TRUE:]] = OpConstantTrue
; CHECK: %[[#I32_0:]] = OpConstant %[[#I32]] 0
; CHECK: %[[#F32:]] = OpTypeFloat 32
; CHECK: %[[#CST1:]] = OpConstant %[[#F32]] 0x1p+0
; CHECK: %[[#CST0:]] = OpConstant %[[#F32]] 0x0p+0

func @if0(%0: i32) {
    %c42 = constant 42 : i32
    %1 = cmp.lt %0, %c42 : bool
    if %1 {
        %2 = arith.neg %0 : i32
    } else {
        %3 = arith.not %0 : i32
    }
; CHECK:                  %[[#]] = OpFunction {{.*}}
; CHECK:       %[[#CONDITION0:]] = OpSLessThan %[[#]] %[[#]] %[[#]] 
; CHECK-NEXT:                      OpSelectionMerge %[[#MERGE_LABEL0:]] None
; CHECK-NEXT:                      OpBranchConditional %[[#CONDITION0]] %[[#TRUE_LABEL0:]] %[[#FALSE_LABEL0:]]
; CHECK-NEXT:  %[[#TRUE_LABEL0]] = OpLabel
; CHECK-NEXT:             %[[#]] = OpSNegate %[[#]] %[[#]]
; CHECK-NEXT:                      OpBranch %[[#MERGE_LABEL0]]
; CHECK-NEXT: %[[#FALSE_LABEL0]] = OpLabel
; CHECK-NEXT:             %[[#]] = OpNot %[[#]] %[[#]]
; CHECK-NEXT:                      OpBranch %[[#MERGE_LABEL0]]
; CHECK-NEXT: %[[#MERGE_LABEL0]] = OpLabel
}

func @if1() {
    %c1 = constant true : bool
    if %c1 -> (){
        yield ()
    } else {
        yield ()
    }
; Just check that it does not crash
; CHECK:                  %[[#]] = OpFunction {{.*}}
}

func @if2(%0: i32) {
    %c1 = constant true : bool
    %x = if %c1 -> (i32) {
        %1 = if %c1 -> (i32) {
            yield (%0)
        } else {
            %c0 = constant 0 : i32
            yield (%c0)
        }
        yield (%1)
    } else {
        %1 = arith.not %0 : i32
        yield (%1)
    }
    %y = arith.not %x : i32
; CHECK:                         %[[#]] = OpFunction {{.*}}
; CHECK-NEXT:             %[[#PARAM2:]] = OpFunctionParameter %[[#]]
; CHECK-NEXT:                    %[[#]] = OpLabel
; CHECK-NEXT:                             OpSelectionMerge %[[#MERGE_LABEL2:]] None
; CHECK-NEXT:                             OpBranchConditional %[[#BOOL_TRUE]] %[[#THEN_LABEL2:]] %[[#OTHER_LABEL2:]]
; CHECK-NEXT:         %[[#THEN_LABEL2]] = OpLabel
; CHECK-NEXT:                             OpSelectionMerge %[[#NESTED_MERGE_LABEL2:]] None
; CHECK-NEXT:                             OpBranchConditional %[[#BOOL_TRUE]] %[[#NESTED_THEN_LABEL2:]] %[[#NESTED_OTHER_LABEL2:]]
; CHECK-NEXT:  %[[#NESTED_THEN_LABEL2]] = OpLabel
; CHECK-NEXT:                             OpBranch %[[#NESTED_MERGE_LABEL2]]
; CHECK-NEXT: %[[#NESTED_OTHER_LABEL2]] = OpLabel
; CHECK-NEXT:                             OpBranch %[[#NESTED_MERGE_LABEL2]]
; CHECK-NEXT: %[[#NESTED_MERGE_LABEL2]] = OpLabel
; CHECK-NEXT:        %[[#NESTED_PHI2:]] = OpPhi %[[#I32]] %[[#PARAM2]] %[[#NESTED_THEN_LABEL2]] %[[#I32_0]] %[[#NESTED_OTHER_LABEL2]]
; CHECK-NEXT:                             OpBranch %[[#MERGE_LABEL2]]
; CHECK-NEXT:        %[[#OTHER_LABEL2]] = OpLabel
; CHECK-NEXT:         %[[#NOT_PARAM2:]] = OpNot %[[#I32]] %[[#PARAM2]]
; CHECK-NEXT:                             OpBranch %[[#MERGE_LABEL2]]
; CHECK-NEXT:        %[[#MERGE_LABEL2]] = OpLabel
; CHECK-NEXT:               %[[#PHI2:]] = OpPhi %[[#I32]] %[[#NESTED_PHI2]] %[[#NESTED_MERGE_LABEL2]] %[[#NOT_PARAM2]] %[[#OTHER_LABEL2]]
; CHECK-NEXT:                    %[[#]] = OpNot %[[#I32]] %[[#PHI2]]
}

func @if3() attributes{subgroup_size=16} {
    %c1 = constant true : bool
    %y, %x = if %c1 -> (bool,coopmatrix<f32x16x4,matrix_a>) {
        %0 = constant 1.0 : coopmatrix<f32x16x4,matrix_a>
        yield (%c1, %0)
    } else {
        %1 = constant 0.0 : coopmatrix<f32x16x4,matrix_a>
        yield (%c1, %1)
    }
    %z = arith.neg %x : coopmatrix<f32x16x4,matrix_a>
; CHECK:                   %[[#]] = OpFunction {{.*}}
; CHECK-NEXT:              %[[#]] = OpLabel
; CHECK:       %[[#TRUE_LABEL3:]] = OpLabel
; CHECK:      %[[#FALSE_LABEL3:]] = OpLabel
; CHECK:                   %[[#]] = OpLabel
; CHECK-NEXT:       %[[#PHI3_0:]] = OpPhi %[[#BOOL]] %[[#BOOL_TRUE]] %[[#TRUE_LABEL3]] %[[#BOOL_TRUE]] %[[#FALSE_LABEL3]]
; CHECK-NEXT:       %[[#PHI3_1:]] = OpPhi %[[#F32]] %[[#CST1]] %[[#TRUE_LABEL3]] %[[#CST0]] %[[#FALSE_LABEL3]]
; CHECK-NEXT:       %[[#PHI3_2:]] = OpPhi %[[#F32]] %[[#CST1]] %[[#TRUE_LABEL3]] %[[#CST0]] %[[#FALSE_LABEL3]]
; CHECK-NEXT:       %[[#PHI3_3:]] = OpPhi %[[#F32]] %[[#CST1]] %[[#TRUE_LABEL3]] %[[#CST0]] %[[#FALSE_LABEL3]]
; CHECK-NEXT:       %[[#PHI3_4:]] = OpPhi %[[#F32]] %[[#CST1]] %[[#TRUE_LABEL3]] %[[#CST0]] %[[#FALSE_LABEL3]]
; CHECK-NEXT:              %[[#]] = OpFNegate %[[#F32]] %[[#PHI3_1]]
; CHECK-NEXT:              %[[#]] = OpFNegate %[[#F32]] %[[#PHI3_2]]
; CHECK-NEXT:              %[[#]] = OpFNegate %[[#F32]] %[[#PHI3_3]]
; CHECK-NEXT:              %[[#]] = OpFNegate %[[#F32]] %[[#PHI3_4]]
}
