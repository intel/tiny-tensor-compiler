; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc -S -O0 < %s | filecheck %s

; CHECK: %[[#I64:]] = OpTypeInt 64 0
; CHECK: %[[#F32:]] = OpTypeFloat 32
; CHECK: %[[#I8:]] = OpTypeInt 8 0
; CHECK: %[[#F64:]] = OpTypeFloat 64
; CHECK: %[[#C64:]] = OpTypeVector %[[#F64]] 2
; CHECK: %[[#C64_NULL:]] = OpConstantNull %[[#C64]]
; CHECK: %[[#F16:]] = OpTypeFloat 16
; CHECK: %[[#I32:]] = OpTypeInt 32 0
; CHECK: %[[#I8_4:]] = OpTypeVector %[[#I8]] 4

func @tint(%a: i64) {
    %0 = cast %a : i64
    %1 = cast %a : i8
    %2 = cast %a : f32
    %3 = cast %a : c64
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:                 %[[#]] = OpCopyObject %[[#I64]] %[[#]]
; CHECK-NEXT:            %[[#]] = OpSConvert %[[#I8]] %[[#]]
; CHECK-NEXT:            %[[#]] = OpConvertSToF %[[#F32]] %[[#]]
; CHECK-NEXT: %[[#I64_TO_F64:]] = OpConvertSToF %[[#F64]] %[[#]]
; CHECK-NEXT:            %[[#]] = OpCompositeInsert %[[#C64]] %[[#I64_TO_F64]] %[[#C64_NULL]] 0
}

func @tfloat(%a: f32) {
    %1 = cast %a : i8
    %2 = cast %a : f64
    %3 = cast %a : c64
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:                 %[[#]] = OpConvertFToS %[[#I8]] %[[#]]
; CHECK-NEXT:            %[[#]] = OpFConvert %[[#F64]] %[[#]]
; CHECK-NEXT: %[[#F32_TO_F64:]] = OpFConvert %[[#F64]] %[[#]]
; CHECK-NEXT:            %[[#]] = OpCompositeInsert %[[#C64]] %[[#F32_TO_F64]] %[[#C64_NULL]] 0
}

func @thalf(%a: f16) {
    %1 = cast %a : i8
    %2 = cast %a : f64
    %3 = cast %a : c64
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:                 %[[#]] = OpConvertFToS %[[#I8]] %[[#]]
; CHECK-NEXT:            %[[#]] = OpFConvert %[[#F64]] %[[#]]
; CHECK-NEXT: %[[#F16_TO_F64:]] = OpFConvert %[[#F64]] %[[#]]
; CHECK-NEXT:            %[[#]] = OpCompositeInsert %[[#C64]] %[[#F16_TO_F64]] %[[#C64_NULL]] 0
}

func @tbf16(%a: bf16) {
    %1 = cast %a : i8
    %2 = cast %a : f64
    %3 = cast %a : c64
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:         %[[#BF16_AF1:]] = OpConvertBF16ToFINTEL %[[#F32]] %[[#]]
; CHECK-NEXT:             %[[#]] = OpConvertFToS %[[#I8]] %[[#BF16_AF1]]
; CHECK-NEXT:    %[[#BF16_AF2:]] = OpConvertBF16ToFINTEL %[[#F32]] %[[#]]
; CHECK-NEXT:             %[[#]] = OpFConvert %[[#F64]] %[[#BF16_AF2]]
; CHECK-NEXT:    %[[#BF16_AF3:]] = OpConvertBF16ToFINTEL %[[#F32]] %[[#]]
; CHECK-NEXT: %[[#BF16_TO_F64:]] = OpFConvert %[[#F64]] %[[#BF16_AF3]]
; CHECK-NEXT:             %[[#]] = OpCompositeInsert %[[#C64]] %[[#BF16_TO_F64]] %[[#C64_NULL]] 0
}

func @tcomplex(%a: c32) {
    %1 = cast %a : c64
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      %[[#]] = OpFConvert %[[#C64]] %[[#]]
}

func @tfloatcoopmatrix() attributes{subgroup_size=16} {
    %0 = constant 1.0 : coopmatrix<f32x16x4,matrix_a>
    %2 = cast %0  : coopmatrix<i8x16x4,matrix_a>
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:         %[[#R3:]] = OpUndef %[[#I32]]
; CHECK-NEXT:  %[[#A3_0:]] = OpCompositeExtract %[[#F32]] %[[#]] 0
; CHECK-NEXT: %[[#cA3_0:]] = OpConvertFToS %[[#I8]] %[[#A3_0]]
; CHECK-NEXT: %[[#vR3_0:]] = OpBitcast %[[#I8_4]] %[[#R3]]
; CHECK-NEXT: %[[#wR3_0:]] = OpCompositeInsert %[[#I8_4]] %[[#cA3_0]] %[[#vR3_0]] 0
; CHECK-NEXT:  %[[#R3_0:]] = OpBitcast %[[#I32]] %[[#wR3_0]]
; CHECK-NEXT:  %[[#A3_1:]] = OpCompositeExtract %[[#F32]] %[[#]] 1
; CHECK-NEXT: %[[#cA3_1:]] = OpConvertFToS %[[#I8]] %[[#A3_1]]
; CHECK-NEXT: %[[#vR3_1:]] = OpBitcast %[[#I8_4]] %[[#R3_0]]
; CHECK-NEXT: %[[#wR3_1:]] = OpCompositeInsert %[[#I8_4]] %[[#cA3_1]] %[[#vR3_1]] 1
; CHECK-NEXT:  %[[#R3_1:]] = OpBitcast %[[#I32]] %[[#wR3_1]]
; CHECK-NEXT:  %[[#A3_2:]] = OpCompositeExtract %[[#F32]] %[[#]] 2
; CHECK-NEXT: %[[#cA3_2:]] = OpConvertFToS %[[#I8]] %[[#A3_2]]
; CHECK-NEXT: %[[#vR3_2:]] = OpBitcast %[[#I8_4]] %[[#R3_1]]
; CHECK-NEXT: %[[#wR3_2:]] = OpCompositeInsert %[[#I8_4]] %[[#cA3_2]] %[[#vR3_2]] 2
; CHECK-NEXT:  %[[#R3_2:]] = OpBitcast %[[#I32]] %[[#wR3_2]]
; CHECK-NEXT:  %[[#A3_3:]] = OpCompositeExtract %[[#F32]] %[[#]] 3
; CHECK-NEXT: %[[#cA3_3:]] = OpConvertFToS %[[#I8]] %[[#A3_3]]
; CHECK-NEXT: %[[#vR3_3:]] = OpBitcast %[[#I8_4]] %[[#R3_2]]
; CHECK-NEXT:       %[[#]] = OpCompositeInsert %[[#I8_4]] %[[#cA3_3]] %[[#vR3_3]] 3
}
