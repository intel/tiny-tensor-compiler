; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc -S -O0 < %s | filecheck %s

; CHECK: OpCapability Int64
; CHECK: %[[#EXT:]] = OpExtInstImport "OpenCL.std"
; CHECK: %[[#BOOL:]] = OpTypeBool
; CHECK: %[[#I64:]] = OpTypeInt 64 0
; CHECK: %[[#F32:]] = OpTypeFloat 32
; CHECK: %[[#F16:]] = OpTypeFloat 16
; CHECK: %[[#I16:]] = OpTypeInt 16 0
; CHECK: %[[#C32:]] = OpTypeVector %[[#F32]] 2
; CHECK: %[[#F32_4:]] = OpTypeVector %[[#F32]] 4

func @tbool(%a: bool) {
    %0 = arith.not %a : bool
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      OpLogicalNot %[[#BOOL]] %[[#]]
}

func @tint(%a: i64) {
    %0 = arith.abs %a : i64
    %1 = arith.neg %a : i64
    %2 = arith.not %a : i64
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      OpExtInst %[[#I64]] %[[#EXT]] s_abs %[[#]]
; CHECK-NEXT: OpSNegate %[[#I64]] %[[#]]
; CHECK-NEXT: OpNot %[[#I64]] %[[#]]
}

func @tfloat(%a: f32) {
    %0 = arith.abs %a : f32
    %1 = arith.neg %a : f32
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      OpExtInst %[[#F32]] %[[#EXT]] fabs %[[#]]
; CHECK-NEXT: OpFNegate %[[#F32]] %[[#]]
}

func @thalf(%a: f16) {
    %0 = arith.abs %a : f16
    %1 = arith.neg %a : f16
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      OpExtInst %[[#F16]] %[[#EXT]] fabs %[[#]]
; CHECK-NEXT: OpFNegate %[[#F16]] %[[#]]
}

func @tbf16(%a: bf16) {
    %0 = arith.abs %a : bf16
    %1 = arith.neg %a : bf16
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:        %[[#BF16_AF1:]] = OpConvertBF16ToFINTEL %[[#F32]] %[[#]]
; CHECK-NEXT: %[[#BF16_OPAF1:]] = OpExtInst %[[#F32]] %[[#EXT]] fabs %[[#BF16_AF1]]
; CHECK-NEXT:            %[[#]] = OpConvertFToBF16INTEL %[[#I16]] %[[#BF16_OPAF1]]
; CHECK-NEXT:   %[[#BF16_AF2:]] = OpConvertBF16ToFINTEL %[[#F32]] %[[#]]
; CHECK-NEXT: %[[#BF16_OPAF2:]] = OpFNegate %[[#F32]] %[[#BF16_AF2]]
; CHECK-NEXT:            %[[#]] = OpConvertFToBF16INTEL %[[#I16]] %[[#BF16_OPAF2]]
}

func @tcomplex(%a: c32) {
    %0 = arith.abs %a : f32
    %1 = arith.neg %a : c32
    %2 = arith.conj %a : c32
    %3 = arith.im %a : f32
    %4 = arith.re %a : f32
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:      %[[#A2:]] = OpFMul %[[#C32]] %[[#]] %[[#]]
; CHECK-NEXT: %[[#A2_0:]] = OpCompositeExtract %[[#F32]] %[[#A2]] 0
; CHECK-NEXT: %[[#A2_1:]] = OpCompositeExtract %[[#F32]] %[[#A2]] 1
; CHECK-NEXT: %[[#A2_0p1:]] = OpFAdd %[[#F32]] %[[#A2_0]] %[[#A2_1]]
; CHECK-NEXT: %[[#]] = OpExtInst %[[#F32]] %[[#EXT]] sqrt %[[#A2_0p1]]
; CHECK-NEXT: %[[#]] = OpFNegate %[[#C32]] %[[#]]
; CHECK-NEXT: %[[#A_IM:]] = OpCompositeExtract %[[#F32]] %[[#OPERAND:]] 1
; CHECK-NEXT: %[[#NEG_A_IM:]] = OpFNegate %[[#F32]] %[[#A_IM]]
; CHECK-NEXT: %[[#]] = OpCompositeInsert %[[#C32]] %[[#NEG_A_IM]] %[[#OPERAND]] 1
; CHECK-NEXT: %[[#]] = OpCompositeExtract %[[#F32]] %[[#]] 1
; CHECK-NEXT: %[[#]] = OpCompositeExtract %[[#F32]] %[[#]] 0
}

func @tfloatcoopmatrix() attributes{subgroup_size=16} {
    %0 = constant 1.0 : coopmatrix<f32x16x4,matrix_a>
    %2 = arith.neg %0 : coopmatrix<f32x16x4,matrix_a>
; CHECK-LABEL: %[[#]] = OpFunction {{.*}}
; CHECK:          %[[#R3:]] = OpUndef %[[#F32_4]]
; CHECK-NEXT:   %[[#A3_0:]] = OpCompositeExtract %[[#F32]] %[[#]] 0
; CHECK-NEXT:  %[[#nA3_0:]] = OpFNegate %[[#F32]] %[[#A3_0]]
; CHECK-NEXT:   %[[#R3_0:]] = OpCompositeInsert %[[#F32_4]] %[[#nA3_0]] %[[#R3]] 0
; CHECK-NEXT:   %[[#A3_1:]] = OpCompositeExtract %[[#F32]] %[[#]] 1
; CHECK-NEXT:  %[[#nA3_1:]] = OpFNegate %[[#F32]] %[[#A3_1]]
; CHECK-NEXT:   %[[#R3_1:]] = OpCompositeInsert %[[#F32_4]] %[[#nA3_1]] %[[#R3_0]] 1
; CHECK-NEXT:   %[[#A3_2:]] = OpCompositeExtract %[[#F32]] %[[#]] 2
; CHECK-NEXT:  %[[#nA3_2:]] = OpFNegate %[[#F32]] %[[#A3_2]]
; CHECK-NEXT:   %[[#R3_2:]] = OpCompositeInsert %[[#F32_4]] %[[#nA3_2]] %[[#R3_1]] 2
; CHECK-NEXT:   %[[#A3_3:]] = OpCompositeExtract %[[#F32]] %[[#]] 3
; CHECK-NEXT:  %[[#nA3_3:]] = OpFNegate %[[#F32]] %[[#A3_3]]
; CHECK-NEXT:        %[[#]] = OpCompositeInsert %[[#F32_4]] %[[#nA3_3]] %[[#R3_2]] 3
}
