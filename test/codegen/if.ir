; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc < %s | filecheck %s
func @if0(%0: i32) {
    %c16 = constant 16 -> i32
    %c0 = constant 0 -> i32
    %1 = cmp.lt %0, %c16 : i32
    %2 = cmp.ge %0, %c0 : i32
    %3 = arith.and %1, %2 : i1
    if %3 {
    } else {
    }
; CHECK:      bool x1 = x0 < c16;
; CHECK:      bool x2 = x0 >= c0;
; CHECK:      bool x3 = x1 && x2;
; CHECK:      if (x3) {
; CHECK-NEXT: } else {
; CHECK-NEXT: }
}

func @if1(%0: i32) {
    %c16 = constant 16 -> i32
    %1 = cmp.lt %0, %c16 : i32
    if %1 {
    } else {
    }
; CHECK:      if (x1) {
; CHECK-NEXT: } else {
; CHECK-NEXT: }
}

func @if2(%0: i32) {
    %c16 = constant 16 -> i32
    %1 = cmp.lt %0, %c16 : i32
    if %1 -> () {
        yield :
    } else {
        yield :
    }
; CHECK:      if (x1) {
; CHECK-NEXT: } else {
; CHECK-NEXT: }
}

func @if3(%0: i32) {
    %c16 = constant 16 -> i32
    %1 = cmp.lt %0, %c16 : i32
    %x = if %1 -> (i32) {
        yield %0 : i32
    } else {
        yield %c16 : i32
    }
; CHECK:      int x;
; CHECK-NEXT: if (x1) {
; CHECK-NEXT:     x = x0;
; CHECK-NEXT: } else {
; CHECK-NEXT:     x = c16;
; CHECK-NEXT: }
}

func @if4(%0: i32) {
    %c16 = constant 16 -> i32
    %1 = cmp.lt %0, %c16 : i32
    %x, %y = if %1 -> (i32, f32) {
        if %1 {
        }
        %one = constant 1.0 -> f32
        yield %0, %one : i32, f32
    } else {
        %z = if %1 -> (f32) {
            %one = constant 1.0 -> f32
            yield %one : f32
        } else {
            %zero = constant 0.0 -> f32
            yield %zero : f32
        }
        yield %c16, %z : i32, f32
    }
; CHECK:      int x;
; CHECK-NEXT: float y;
; CHECK-NEXT: if (x1) {
; CHECK-NEXT:     if (x1) {
; CHECK-NEXT:     }
; CHECK-NEXT:     float one = 0x1p+0f;
; CHECK-NEXT:     x = x0;
; CHECK-NEXT:     y = one;
; CHECK-NEXT: } else {
; CHECK-NEXT:     float z;
; CHECK-NEXT:     if (x1) {
; CHECK-NEXT:         float one = 0x1p+0f;
; CHECK-NEXT:         z = one;
; CHECK-NEXT:     } else {
; CHECK-NEXT:         float zero = 0x0p+0f;
; CHECK-NEXT:         z = zero;
; CHECK-NEXT:     }
; CHECK-NEXT:     x = c16;
; CHECK-NEXT:     y = z;
; CHECK-NEXT: }
}
