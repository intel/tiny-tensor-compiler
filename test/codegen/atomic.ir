; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc < %s | filecheck %s
func @atomic_store(%A: memref<f64x2>) {
    %f0 = constant 0.0 : f64
    %i0 = constant 0 : index
    store.atomic %f0, %A[%i0]
    store.atomic_add %f0, %A[%i0]
; CHECK-LABEL: void atomic_store({{.*}}
; CHECK: atomic_store_explicit((global volatile atomic_double*) (A + i0 * 1), f0, memory_order_relaxed, memory_scope_work_group);
; CHECK: atomic_fetch_add_explicit((global volatile atomic_double*) (A + i0 * 1), f0, memory_order_relaxed, memory_scope_work_group);
}

func @atomic_store_c64(%A: memref<c64x2>) {
    %f0 = constant [0.0, 0.0] : c64
    %i0 = constant 0 : index
    store.atomic %f0, %A[%i0]
    store.atomic_add %f0, %A[%i0]
; CHECK-LABEL: void atomic_store_c64({{.*}}
; CHECK:      atomic_store_explicit((atomic_double*global volatile) &(*(A + i0 * 1)).x, f0, memory_order_relaxed, memory_scope_work_group);
; CHECK-NEXT: atomic_store_explicit((atomic_double*global volatile) &(*(A + i0 * 1)).y, f0, memory_order_relaxed, memory_scope_work_group);
; CHECK:      atomic_fetch_add_explicit((atomic_double*global volatile) &(*(A + i0 * 1)).x, f0, memory_order_relaxed, memory_scope_work_group);
; CHECK-NEXT: atomic_fetch_add_explicit((atomic_double*global volatile) &(*(A + i0 * 1)).y, f0, memory_order_relaxed, memory_scope_work_group);
}


