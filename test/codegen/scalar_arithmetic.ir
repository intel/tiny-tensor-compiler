; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc -O0 < %s | filecheck %s
func @t1(%a: i32, %b: i32, %a1: bool, %b1: bool) {
  %1 = arith.add %a, %b : i32
  %2 = arith.sub %a, %b : i32
  %3 = arith.mul %a, %b : i32
  %4 = arith.div %a, %b : i32
  %5 = arith.rem %a, %b : i32
  %6 = arith.shl %a, %b : i32
  %7 = arith.shr %a, %b : i32
  %8 = arith.and %a, %b : i32
  %9 = arith.and %a1, %b1 : bool
  %10 = arith.or %a, %b : i32
  %11 = arith.or %a1, %b1 : bool
  %12 = arith.xor %a, %b : i32
  %13 = arith.neg %a : i32
  %14 = arith.not %a : i32
  %15 = arith.not %a1 : bool
  %16 = arith.abs %a : i32
; CHECK:      int x = a + b;
; CHECK-NEXT: int x1 = a - b;
; CHECK-NEXT: int x2 = a * b;
; CHECK-NEXT: int x3 = a / b;
; CHECK-NEXT: int x4 = a % b;
; CHECK-NEXT: int x5 = a << b;
; CHECK-NEXT: int x6 = a >> b;
; CHECK-NEXT: int x7 = a & b;
; CHECK-NEXT: bool x8 = a1 && b1;
; CHECK-NEXT: int x9 = a | b;
; CHECK-NEXT: bool x10 = a1 || b1;
; CHECK-NEXT: int x11 = a ^ b;
; CHECK-NEXT: int x12 = -a;
; CHECK-NEXT: int x13 = ~a;
; CHECK-NEXT: bool x14 = !a1;
; CHECK-NEXT: int x15 = abs(a);
}
func @t2(%a: i32, %b: i32) {
  %1 = cmp.eq %a, %b : i32
  %2 = cmp.ne %a, %b : i32
  %3 = cmp.gt %a, %b : i32
  %4 = cmp.ge %a, %b : i32
  %5 = cmp.lt %a, %b : i32
  %6 = cmp.le %a, %b : i32
; CHECK:      bool x = a == b;
; CHECK-NEXT: bool x1 = a != b;
; CHECK-NEXT: bool x2 = a > b;
; CHECK-NEXT: bool x3 = a >= b;
; CHECK-NEXT: bool x4 = a < b;
; CHECK-NEXT: bool x5 = a <= b;
}
func @t3(%a: f32, %b: f32) {
  %1 = arith.add %a, %b : f32
  %2 = arith.sub %a, %b : f32
  %3 = arith.mul %a, %b : f32
  %4 = arith.div %a, %b : f32
  %5 = arith.rem %a, %b : f32
  %6 = arith.neg %a : f32
  %7 = arith.abs %a : f32
; CHECK:      float x = a + b;
; CHECK-NEXT: float x1 = a - b;
; CHECK-NEXT: float x2 = a * b;
; CHECK-NEXT: float x3 = a / b;
; CHECK-NEXT: float x4 = fmod(a, b);
; CHECK-NEXT: float x5 = -a;
; CHECK-NEXT: float x6 = fabs(a);
}
func @t4(%a: f32, %b: f32) {
  %1 = cmp.eq %a, %b : f32
  %2 = cmp.ne %a, %b : f32
  %3 = cmp.gt %a, %b : f32
  %4 = cmp.ge %a, %b : f32
  %5 = cmp.lt %a, %b : f32
  %6 = cmp.le %a, %b : f32
; CHECK:      bool x = a == b;
; CHECK-NEXT: bool x1 = a != b;
; CHECK-NEXT: bool x2 = a > b;
; CHECK-NEXT: bool x3 = a >= b;
; CHECK-NEXT: bool x4 = a < b;
; CHECK-NEXT: bool x5 = a <= b;
}
func @t5(%a: i32) {
  %b = cast %a : i32 -> index
; CHECK: long b = (long) a;
}
func @t6(%a: c32, %b: c32) {
  %0 = arith.add %a, %b : c32
  %1 = arith.sub %a, %b : c32
  %2 = arith.mul %a, %b : c32
  %3 = arith.div %a, %b : c32
  %4 = arith.neg %a : c32
  %5 = arith.abs %a : c32
  %6 = arith.conj %a : c32
  %7 = arith.im %a : c32
  %8 = arith.re %a : c32
; CHECK:      float2 x = a + b;
; CHECK-NEXT: float2 x1 = a - b;
; CHECK-NEXT: float2 x2 = a * b.x + (float2) (-a.y, a.x) * b.y;
; CHECK-NEXT: float2 x3 = (a * b.x - (float2) (-a.y, a.x) * b.y) / (b.x * b.x + b.y * b.y);
; CHECK-NEXT: float2 x4 = -a;
; CHECK-NEXT: float x5 = sqrt(a.x * a.x + a.y * a.y);
; CHECK-NEXT: float2 x6 = (float2) (a.x, -a.y);
; CHECK-NEXT: float x7 = a.y;
; CHECK-NEXT: float x8 = a.x;
}
