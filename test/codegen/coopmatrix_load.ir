; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-oc -O0 < %s | filecheck %s
func @coopmatrix_a_load_n(%A: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.n %A[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x16x8,matrix_a>
; CHECK-LABEL: void coopmatrix_a_load_n({{.*}}
; CHECK:      float x1[8];
; CHECK-NEXT: global float* x2 = A + x * 1 + y * 64;
; CHECK-NEXT: x1[0] = as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 0 * 64)));
; CHECK-NEXT: x1[1] = as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 1 * 64)));
; CHECK-NEXT: x1[2] = as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 2 * 64)));
; CHECK-NEXT: x1[3] = as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 3 * 64)));
; CHECK-NEXT: x1[4] = as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 4 * 64)));
; CHECK-NEXT: x1[5] = as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 5 * 64)));
; CHECK-NEXT: x1[6] = as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 6 * 64)));
; CHECK-NEXT: x1[7] = as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 7 * 64)));
}

func @coopmatrix_a_load_n_rows_checked(%A: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.n.rows_checked %A[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x32x2,matrix_a>
; CHECK-LABEL: void coopmatrix_a_load_n_rows_checked({{.*}}
; CHECK:      float x1[4];
; CHECK-NEXT: global float* x2 = A + x * 1 + y * 64;
; CHECK-NEXT: long x3 = 64 - x;
; CHECK-NEXT: long x4 = 48 - y;
; CHECK-NEXT: bool x5 = get_sub_group_local_id() + 0 >= -x && get_sub_group_local_id() + 0 < x3;
; CHECK-NEXT: x1[0] = x5 ? x2[1 * (get_sub_group_local_id() + 0) + 0 * 64] : 0;
; CHECK-NEXT: x1[1] = x5 ? x2[1 * (get_sub_group_local_id() + 0) + 1 * 64] : 0;
; CHECK-NEXT: bool x6 = get_sub_group_local_id() + 16 >= -x && get_sub_group_local_id() + 16 < x3;
; CHECK-NEXT: x1[2] = x6 ? x2[1 * (get_sub_group_local_id() + 16) + 0 * 64] : 0;
; CHECK-NEXT: x1[3] = x6 ? x2[1 * (get_sub_group_local_id() + 16) + 1 * 64] : 0;
}

func @coopmatrix_a_load_n_cols_checked(%A: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.n.cols_checked %A[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x32x2,matrix_a>
; CHECK-LABEL: void coopmatrix_a_load_n_cols_checked({{.*}}
; CHECK:      float x1[4];
; CHECK-NEXT: global float* x2 = A + x * 1 + y * 64;
; CHECK-NEXT: long x3 = 64 - x;
; CHECK-NEXT: long x4 = 48 - y;
; CHECK-NEXT: x1[0] = 0 >= -y && 0 < x4 ? as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 0 * 64))) : 0;
; CHECK-NEXT: x1[1] = 1 >= -y && 1 < x4 ? as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 0 + 1 * 64))) : 0;
; CHECK-NEXT: x1[2] = 0 >= -y && 0 < x4 ? as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 16 + 0 * 64))) : 0;
; CHECK-NEXT: x1[3] = 1 >= -y && 1 < x4 ? as_float(intel_sub_group_block_read_ui((global uint*) (x2 + 16 + 1 * 64))) : 0;
}

func @coopmatrix_a_load_n_checked(%A: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.n.both_checked %A[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x32x8,matrix_a>
; CHECK-LABEL: void coopmatrix_a_load_n_checked({{.*}}
; CHECK:      float x1[16];
; CHECK-NEXT: global float* x2 = A + x * 1 + y * 64;
; CHECK-NEXT: long x3 = 64 - x;
; CHECK-NEXT: long x4 = 48 - y;
; CHECK-NEXT: bool x5 = get_sub_group_local_id() + 0 >= -x && get_sub_group_local_id() + 0 < x3;
; CHECK-NEXT: x1[0] = x5 && (0 >= -y && 0 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 0 * 64] : 0;
; CHECK-NEXT: x1[1] = x5 && (1 >= -y && 1 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 1 * 64] : 0;
; CHECK-NEXT: x1[2] = x5 && (2 >= -y && 2 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 2 * 64] : 0;
; CHECK-NEXT: x1[3] = x5 && (3 >= -y && 3 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 3 * 64] : 0;
; CHECK-NEXT: x1[4] = x5 && (4 >= -y && 4 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 4 * 64] : 0;
; CHECK-NEXT: x1[5] = x5 && (5 >= -y && 5 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 5 * 64] : 0;
; CHECK-NEXT: x1[6] = x5 && (6 >= -y && 6 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 6 * 64] : 0;
; CHECK-NEXT: x1[7] = x5 && (7 >= -y && 7 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 7 * 64] : 0;
; CHECK-NEXT: bool x6 = get_sub_group_local_id() + 16 >= -x && get_sub_group_local_id() + 16 < x3;
; CHECK-NEXT: x1[8] = x6 && (0 >= -y && 0 < x4) ? x2[1 * (get_sub_group_local_id() + 16) + 0 * 64] : 0;
; CHECK-NEXT: x1[9] = x6 && (1 >= -y && 1 < x4) ? x2[1 * (get_sub_group_local_id() + 16) + 1 * 64] : 0;
; CHECK-NEXT: x1[10] = x6 && (2 >= -y && 2 < x4) ? x2[1 * (get_sub_group_local_id() + 16) + 2 * 64] : 0;
; CHECK-NEXT: x1[11] = x6 && (3 >= -y && 3 < x4) ? x2[1 * (get_sub_group_local_id() + 16) + 3 * 64] : 0;
; CHECK-NEXT: x1[12] = x6 && (4 >= -y && 4 < x4) ? x2[1 * (get_sub_group_local_id() + 16) + 4 * 64] : 0;
; CHECK-NEXT: x1[13] = x6 && (5 >= -y && 5 < x4) ? x2[1 * (get_sub_group_local_id() + 16) + 5 * 64] : 0;
; CHECK-NEXT: x1[14] = x6 && (6 >= -y && 6 < x4) ? x2[1 * (get_sub_group_local_id() + 16) + 6 * 64] : 0;
; CHECK-NEXT: x1[15] = x6 && (7 >= -y && 7 < x4) ? x2[1 * (get_sub_group_local_id() + 16) + 7 * 64] : 0;
}

func @coopmatrix_a_load_t(%A: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.t %A[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x16x8,matrix_a>
; CHECK-LABEL: void coopmatrix_a_load_t({{.*}}
; CHECK:      float x1[8];
; CHECK-NEXT: global float* x2 = A + x * 1 + y * 64;
; CHECK-NEXT: x1[0] = x2[64 * (get_sub_group_local_id() + 0) + 0 * 1];
; CHECK-NEXT: x1[1] = x2[64 * (get_sub_group_local_id() + 0) + 1 * 1];
; CHECK-NEXT: x1[2] = x2[64 * (get_sub_group_local_id() + 0) + 2 * 1];
; CHECK-NEXT: x1[3] = x2[64 * (get_sub_group_local_id() + 0) + 3 * 1];
; CHECK-NEXT: x1[4] = x2[64 * (get_sub_group_local_id() + 0) + 4 * 1];
; CHECK-NEXT: x1[5] = x2[64 * (get_sub_group_local_id() + 0) + 5 * 1];
; CHECK-NEXT: x1[6] = x2[64 * (get_sub_group_local_id() + 0) + 6 * 1];
; CHECK-NEXT: x1[7] = x2[64 * (get_sub_group_local_id() + 0) + 7 * 1];
}

func @coopmatrix_a_load_t_checked(%A: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.t.both_checked %A[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x16x8,matrix_a>
; CHECK-LABEL: void coopmatrix_a_load_t_checked({{.*}}
; CHECK:      float x1[8];
; CHECK-NEXT: global float* x2 = A + x * 1 + y * 64;
; CHECK-NEXT: long x3 = 64 - x;
; CHECK-NEXT: long x4 = 48 - y;
; CHECK-NEXT: bool x5 = get_sub_group_local_id() + 0 >= -y && get_sub_group_local_id() + 0 < x4;
; CHECK-NEXT: x1[0] = x5 && (0 >= -x && 0 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 0 * 1] : 0;
; CHECK-NEXT: x1[1] = x5 && (1 >= -x && 1 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 1 * 1] : 0;
; CHECK-NEXT: x1[2] = x5 && (2 >= -x && 2 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 2 * 1] : 0;
; CHECK-NEXT: x1[3] = x5 && (3 >= -x && 3 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 3 * 1] : 0;
; CHECK-NEXT: x1[4] = x5 && (4 >= -x && 4 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 4 * 1] : 0;
; CHECK-NEXT: x1[5] = x5 && (5 >= -x && 5 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 5 * 1] : 0;
; CHECK-NEXT: x1[6] = x5 && (6 >= -x && 6 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 6 * 1] : 0;
; CHECK-NEXT: x1[7] = x5 && (7 >= -x && 7 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 7 * 1] : 0;
}

func @coopmatrix_b_load_n(%B: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.n %B[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x8x16,matrix_b>
; CHECK-LABEL: void coopmatrix_b_load_n({{.*}}
; CHECK:      float x1[8];
; CHECK-NEXT: global float* x2 = B + x * 1 + y * 64;
; CHECK-NEXT: x1[0] = x2[64 * (get_sub_group_local_id() + 0) + 0 * 1];
; CHECK-NEXT: x1[1] = x2[64 * (get_sub_group_local_id() + 0) + 1 * 1];
; CHECK-NEXT: x1[2] = x2[64 * (get_sub_group_local_id() + 0) + 2 * 1];
; CHECK-NEXT: x1[3] = x2[64 * (get_sub_group_local_id() + 0) + 3 * 1];
; CHECK-NEXT: x1[4] = x2[64 * (get_sub_group_local_id() + 0) + 4 * 1];
; CHECK-NEXT: x1[5] = x2[64 * (get_sub_group_local_id() + 0) + 5 * 1];
; CHECK-NEXT: x1[6] = x2[64 * (get_sub_group_local_id() + 0) + 6 * 1];
; CHECK-NEXT: x1[7] = x2[64 * (get_sub_group_local_id() + 0) + 7 * 1];
}

func @coopmatrix_b_load_n_checked(%B: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.n.both_checked %B[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x8x32,matrix_b>
; CHECK-LABEL: void coopmatrix_b_load_n_checked({{.*}}
; CHECK:      float x1[16];
; CHECK-NEXT: global float* x2 = B + x * 1 + y * 64;
; CHECK-NEXT: long x3 = 64 - x;
; CHECK-NEXT: long x4 = 48 - y;
; CHECK-NEXT: bool x5 = get_sub_group_local_id() + 0 >= -y && get_sub_group_local_id() + 0 < x4;
; CHECK-NEXT: x1[0] = x5 && (0 >= -x && 0 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 0 * 1] : 0;
; CHECK-NEXT: x1[1] = x5 && (1 >= -x && 1 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 1 * 1] : 0;
; CHECK-NEXT: x1[2] = x5 && (2 >= -x && 2 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 2 * 1] : 0;
; CHECK-NEXT: x1[3] = x5 && (3 >= -x && 3 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 3 * 1] : 0;
; CHECK-NEXT: x1[4] = x5 && (4 >= -x && 4 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 4 * 1] : 0;
; CHECK-NEXT: x1[5] = x5 && (5 >= -x && 5 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 5 * 1] : 0;
; CHECK-NEXT: x1[6] = x5 && (6 >= -x && 6 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 6 * 1] : 0;
; CHECK-NEXT: x1[7] = x5 && (7 >= -x && 7 < x3) ? x2[64 * (get_sub_group_local_id() + 0) + 7 * 1] : 0;
; CHECK-NEXT: bool x6 = get_sub_group_local_id() + 16 >= -y && get_sub_group_local_id() + 16 < x4;
; CHECK-NEXT: x1[8] = x6 && (0 >= -x && 0 < x3) ? x2[64 * (get_sub_group_local_id() + 16) + 0 * 1] : 0;
; CHECK-NEXT: x1[9] = x6 && (1 >= -x && 1 < x3) ? x2[64 * (get_sub_group_local_id() + 16) + 1 * 1] : 0;
; CHECK-NEXT: x1[10] = x6 && (2 >= -x && 2 < x3) ? x2[64 * (get_sub_group_local_id() + 16) + 2 * 1] : 0;
; CHECK-NEXT: x1[11] = x6 && (3 >= -x && 3 < x3) ? x2[64 * (get_sub_group_local_id() + 16) + 3 * 1] : 0;
; CHECK-NEXT: x1[12] = x6 && (4 >= -x && 4 < x3) ? x2[64 * (get_sub_group_local_id() + 16) + 4 * 1] : 0;
; CHECK-NEXT: x1[13] = x6 && (5 >= -x && 5 < x3) ? x2[64 * (get_sub_group_local_id() + 16) + 5 * 1] : 0;
; CHECK-NEXT: x1[14] = x6 && (6 >= -x && 6 < x3) ? x2[64 * (get_sub_group_local_id() + 16) + 6 * 1] : 0;
; CHECK-NEXT: x1[15] = x6 && (7 >= -x && 7 < x3) ? x2[64 * (get_sub_group_local_id() + 16) + 7 * 1] : 0;
}

func @coopmatrix_b_load_t(%B: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.t %B[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x8x16,matrix_b>
; CHECK-LABEL: void coopmatrix_b_load_t({{.*}}
; CHECK:      float x1[8];
; CHECK-NEXT: global float* x2 = B + x * 1 + y * 64;
; CHECK-NEXT: x1[0] = x2[1 * (get_sub_group_local_id() + 0) + 0 * 64];
; CHECK-NEXT: x1[1] = x2[1 * (get_sub_group_local_id() + 0) + 1 * 64];
; CHECK-NEXT: x1[2] = x2[1 * (get_sub_group_local_id() + 0) + 2 * 64];
; CHECK-NEXT: x1[3] = x2[1 * (get_sub_group_local_id() + 0) + 3 * 64];
; CHECK-NEXT: x1[4] = x2[1 * (get_sub_group_local_id() + 0) + 4 * 64];
; CHECK-NEXT: x1[5] = x2[1 * (get_sub_group_local_id() + 0) + 5 * 64];
; CHECK-NEXT: x1[6] = x2[1 * (get_sub_group_local_id() + 0) + 6 * 64];
; CHECK-NEXT: x1[7] = x2[1 * (get_sub_group_local_id() + 0) + 7 * 64];
}

func @coopmatrix_b_load_t_checked(%B: memref<f32x64x48>, %x: index, %y: index) subgroup_size(16) {
    %0 = cooperative_matrix_load.t.both_checked %B[%x,%y] : memref<f32x64x48> -> coopmatrix<f32x8x16,matrix_b>
; CHECK-LABEL: void coopmatrix_b_load_t_checked({{.*}}
; CHECK:      float x1[8];
; CHECK-NEXT: global float* x2 = B + x * 1 + y * 64;
; CHECK-NEXT: long x3 = 64 - x;
; CHECK-NEXT: long x4 = 48 - y;
; CHECK-NEXT: bool x5 = get_sub_group_local_id() + 0 >= -x && get_sub_group_local_id() + 0 < x3;
; CHECK-NEXT: x1[0] = x5 && (0 >= -y && 0 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 0 * 64] : 0;
; CHECK-NEXT: x1[1] = x5 && (1 >= -y && 1 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 1 * 64] : 0;
; CHECK-NEXT: x1[2] = x5 && (2 >= -y && 2 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 2 * 64] : 0;
; CHECK-NEXT: x1[3] = x5 && (3 >= -y && 3 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 3 * 64] : 0;
; CHECK-NEXT: x1[4] = x5 && (4 >= -y && 4 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 4 * 64] : 0;
; CHECK-NEXT: x1[5] = x5 && (5 >= -y && 5 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 5 * 64] : 0;
; CHECK-NEXT: x1[6] = x5 && (6 >= -y && 6 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 6 * 64] : 0;
; CHECK-NEXT: x1[7] = x5 && (7 >= -y && 7 < x4) ? x2[1 * (get_sub_group_local_id() + 0) + 7 * 64] : 0;
}
