; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-opt -pinsert-lifetime-stop < %s | filecheck %s
func @basic() {
    %0 = alloca : memref<f32x5,local>
; CHECK:      %0 = alloca : memref<f32x5,local>
; CHECK-NEXT: lifetime_stop %0
}

func @use1(%A: memref<f32x32x32>, %C: memref<f32x32x8>) {
; CHECK-LABEL: func @use1{{.*}}
    %B = alloca : memref<f32x32x8,local>
    %one = constant 1.0 : f32
    gemm.n.n %one, %A, %B, %one, %C
; CHECK:      gemm.n.n{{.*}}
; CHECK-NEXT: lifetime_stop %B
}

func @use2(%A: memref<f32x32x32>, %C: memref<f32x32x8>) {
; CHECK-LABEL: func @use2{{.*}}
    %one = constant 1.0 : f32
    %B = alloca : memref<f32x32x8,local>
    gemm.n.n %one, %A, %B, %one, %C
    %B2 = alloca : memref<f32x32x8,local>
    gemm.n.n %one, %A, %B, %one, %C
    gemm.n.n %one, %A, %B2, %one, %C
; CHECK:      %B2 = {{.*}}
; CHECK-NEXT: gemm.n.n{{.*}}
; CHECK-NEXT: lifetime_stop %B
; CHECK:      gemm.n.n{{.*}}
; CHECK-NEXT: lifetime_stop %B2
}

func @use_alias(%a: f32, %A: memref<f32x8x8>, %C: memref<f32x8x8>) {
; CHECK-LABEL: func @use_alias{{.*}}
    %B = alloca : memref<f32x32x2x2x2,local>
    %0 = fuse %B[1,3] : memref<f32x32x8,local>
    %1 = subview %0[0:8,0:8] : memref<f32x8x8,strided<1,32>,local>
    gemm.n.n %a, %A, %1, %a, %C
; CHECK:      gemm.n.n{{.*}}
; CHECK-NEXT: lifetime_stop %B
}

func @region1() {
; CHECK-LABEL: func @region1{{.*}}
    %one = constant 1.0 : f32
    %0 = alloca : memref<f32x8x8,local>
    %lb = constant 0 : index
    %ub = constant 4 : index
    for %i:index=%lb,%ub {
        %1 = alloca : memref<f32x8x8,local>
        for %k:index=%lb,%ub {
            %2 = alloca : memref<f32x8x8,local>
            gemm.n.n %one, %0, %1, %one, %2
            axpby.n %one, %0, %one, %1
        }
    }
; CHECK:              gemm.n.n{{.*}}
; CHECK-NEXT:         lifetime_stop %2
; CHECK-NEXT:         axpby.n{{.*}}
; CHECK-NEXT:     }
; CHECK-NEXT:     lifetime_stop %1
; CHECK-NEXT: }
; CHECK-NEXT: lifetime_stop %0
}
