; Copyright (C) 2024 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

; RUN: %tinytc-opt -plower-coopmatrix < %s | filecheck %s

func @coopmatrix_mul_add_ff() subgroup_size(16) {
    parallel {
        %a = constant 1.0 : coopmatrix<f32x16x2,matrix_a>
        %b = constant 2.0 : coopmatrix<f32x2x2,matrix_b>
        %c = constant 3.0 : coopmatrix<f32x16x2,matrix_acc>
        %c_next = cooperative_matrix_mul_add %a, %b, %c : coopmatrix<f32x16x2,matrix_acc>
    }
; CHECK-LABEL: func @coopmatrix_mul_add_ff({{.*}}
; CHECK:      %0 = constant 0x1p+0 : f32
; CHECK-NEXT: %1 = constant 0x1p+1 : f32
; CHECK-NEXT: %2 = constant 0x1.8p+1 : f32
; CHECK-NEXT: %3 = constant 0 : i32
; CHECK-NEXT: %4 = subgroup_broadcast %1, %3 : f32
; CHECK-NEXT: %5 = arith.mul %0, %4 : f32
; CHECK-NEXT: %6 = arith.add %5, %2 : f32
; CHECK-NEXT: %7 = constant 1 : i32
; CHECK-NEXT: %8 = subgroup_broadcast %1, %7 : f32
; CHECK-NEXT: %9 = arith.mul %0, %8 : f32
; CHECK-NEXT: %10 = arith.add %9, %2 : f32
; CHECK-NEXT: %11 = constant 0 : i32
; CHECK-NEXT: %12 = subgroup_broadcast %1, %11 : f32
; CHECK-NEXT: %13 = arith.mul %0, %12 : f32
; CHECK-NEXT: %14 = arith.add %13, %6 : f32
; CHECK-NEXT: %15 = constant 1 : i32
; CHECK-NEXT: %16 = subgroup_broadcast %1, %15 : f32
; CHECK-NEXT: %17 = arith.mul %0, %16 : f32
; CHECK-NEXT: %18 = arith.add %17, %10 : f32
}

func @coopmatrix_mul_add_cf() subgroup_size(16) {
    parallel {
        %a = constant [1.0, 0.0] : coopmatrix<c32x16x2,matrix_a>
        %b = constant 2.0 : coopmatrix<f32x2x4,matrix_b>
        %c = constant [3.0, 0.0] : coopmatrix<c32x16x4,matrix_acc>
        %c_next = cooperative_matrix_mul_add %a, %b, %c : coopmatrix<c32x16x4,matrix_acc>
    }
; CHECK-LABEL: func @coopmatrix_mul_add_cf({{.*}}
; CHECK:      %0 = constant [0x1p+0,0x0p+0] : c32
; CHECK-NEXT: %1 = constant 0x1p+1 : f32
; CHECK-NEXT: %2 = constant [0x1.8p+1,0x0p+0] : c32
; CHECK-NEXT: %3 = constant 0 : i32
; CHECK-NEXT: %4 = subgroup_broadcast %1, %3 : f32
; CHECK-NEXT: %5 = cast %4 : c32
; CHECK-NEXT: %6 = arith.mul %0, %5 : c32
; CHECK-NEXT: %7 = arith.add %6, %2 : c32
; CHECK-NEXT: %8 = constant 1 : i32
; CHECK-NEXT: %9 = subgroup_broadcast %1, %8 : f32
; CHECK-NEXT: %10 = cast %9 : c32
; CHECK-NEXT: %11 = arith.mul %0, %10 : c32
; CHECK-NEXT: %12 = arith.add %11, %2 : c32
; CHECK-NEXT: %13 = constant 2 : i32
; CHECK-NEXT: %14 = subgroup_broadcast %1, %13 : f32
; CHECK-NEXT: %15 = cast %14 : c32
; CHECK-NEXT: %16 = arith.mul %0, %15 : c32
; CHECK-NEXT: %17 = arith.add %16, %2 : c32
; CHECK-NEXT: %18 = constant 3 : i32
; CHECK-NEXT: %19 = subgroup_broadcast %1, %18 : f32
; CHECK-NEXT: %20 = cast %19 : c32
; CHECK-NEXT: %21 = arith.mul %0, %20 : c32
; CHECK-NEXT: %22 = arith.add %21, %2 : c32
; CHECK-NEXT: %23 = constant 0 : i32
; CHECK-NEXT: %24 = subgroup_broadcast %1, %23 : f32
; CHECK-NEXT: %25 = cast %24 : c32
; CHECK-NEXT: %26 = arith.mul %0, %25 : c32
; CHECK-NEXT: %27 = arith.add %26, %7 : c32
; CHECK-NEXT: %28 = constant 1 : i32
; CHECK-NEXT: %29 = subgroup_broadcast %1, %28 : f32
; CHECK-NEXT: %30 = cast %29 : c32
; CHECK-NEXT: %31 = arith.mul %0, %30 : c32
; CHECK-NEXT: %32 = arith.add %31, %12 : c32
; CHECK-NEXT: %33 = constant 2 : i32
; CHECK-NEXT: %34 = subgroup_broadcast %1, %33 : f32
; CHECK-NEXT: %35 = cast %34 : c32
; CHECK-NEXT: %36 = arith.mul %0, %35 : c32
; CHECK-NEXT: %37 = arith.add %36, %17 : c32
; CHECK-NEXT: %38 = constant 3 : i32
; CHECK-NEXT: %39 = subgroup_broadcast %1, %38 : f32
; CHECK-NEXT: %40 = cast %39 : c32
; CHECK-NEXT: %41 = arith.mul %0, %40 : c32
; CHECK-NEXT: %42 = arith.add %41, %22 : c32
}

func @coopmatrix_mul_add_cc() subgroup_size(16) {
    parallel {
        %a = constant [1.0, 0.0] : coopmatrix<c32x16x2,matrix_a>
        %b = constant [2.0, 0.0] : coopmatrix<c32x2x4,matrix_b>
        %c = constant [3.0, 0.0] : coopmatrix<c32x16x4,matrix_acc>
        %c_next = cooperative_matrix_mul_add %a, %b, %c : coopmatrix<c32x16x4,matrix_acc>
    }
; CHECK-LABEL: func @coopmatrix_mul_add_cc({{.*}}
; CHECK:      %0 = constant [0x1p+0,0x0p+0] : c32
; CHECK-NEXT: %1 = constant [0x1p+1,0x0p+0] : c32
; CHECK-NEXT: %2 = constant [0x1.8p+1,0x0p+0] : c32
; CHECK-NEXT: %3 = constant [0x0p+0,0x0p+0] : c32
; CHECK-NEXT: %4 = constant 0 : i32
; CHECK-NEXT: %5 = subgroup_broadcast %1, %4 : c32
; CHECK-NEXT: %6 = arith.re %5 : f32
; CHECK-NEXT: %7 = arith.im %5 : f32
; CHECK-NEXT: %8 = cast %6 : c32
; CHECK-NEXT: %9 = arith.mul %0, %8 : c32
; CHECK-NEXT: %10 = arith.add %9, %2 : c32
; CHECK-NEXT: %11 = cast %7 : c32
; CHECK-NEXT: %12 = arith.mul %0, %11 : c32
; CHECK-NEXT: %13 = arith.add %12, %3 : c32
; CHECK-NEXT: %14 = constant 1 : i32
; CHECK-NEXT: %15 = subgroup_broadcast %1, %14 : c32
; CHECK-NEXT: %16 = arith.re %15 : f32
; CHECK-NEXT: %17 = arith.im %15 : f32
; CHECK-NEXT: %18 = cast %16 : c32
; CHECK-NEXT: %19 = arith.mul %0, %18 : c32
; CHECK-NEXT: %20 = arith.add %19, %2 : c32
; CHECK-NEXT: %21 = cast %17 : c32
; CHECK-NEXT: %22 = arith.mul %0, %21 : c32
; CHECK-NEXT: %23 = arith.add %22, %3 : c32
; CHECK-NEXT: %24 = constant 2 : i32
; CHECK-NEXT: %25 = subgroup_broadcast %1, %24 : c32
; CHECK-NEXT: %26 = arith.re %25 : f32
; CHECK-NEXT: %27 = arith.im %25 : f32
; CHECK-NEXT: %28 = cast %26 : c32
; CHECK-NEXT: %29 = arith.mul %0, %28 : c32
; CHECK-NEXT: %30 = arith.add %29, %2 : c32
; CHECK-NEXT: %31 = cast %27 : c32
; CHECK-NEXT: %32 = arith.mul %0, %31 : c32
; CHECK-NEXT: %33 = arith.add %32, %3 : c32
; CHECK-NEXT: %34 = constant 3 : i32
; CHECK-NEXT: %35 = subgroup_broadcast %1, %34 : c32
; CHECK-NEXT: %36 = arith.re %35 : f32
; CHECK-NEXT: %37 = arith.im %35 : f32
; CHECK-NEXT: %38 = cast %36 : c32
; CHECK-NEXT: %39 = arith.mul %0, %38 : c32
; CHECK-NEXT: %40 = arith.add %39, %2 : c32
; CHECK-NEXT: %41 = cast %37 : c32
; CHECK-NEXT: %42 = arith.mul %0, %41 : c32
; CHECK-NEXT: %43 = arith.add %42, %3 : c32
; CHECK-NEXT: %44 = constant 0 : i32
; CHECK-NEXT: %45 = subgroup_broadcast %1, %44 : c32
; CHECK-NEXT: %46 = arith.re %45 : f32
; CHECK-NEXT: %47 = arith.im %45 : f32
; CHECK-NEXT: %48 = cast %46 : c32
; CHECK-NEXT: %49 = arith.mul %0, %48 : c32
; CHECK-NEXT: %50 = arith.add %49, %10 : c32
; CHECK-NEXT: %51 = cast %47 : c32
; CHECK-NEXT: %52 = arith.mul %0, %51 : c32
; CHECK-NEXT: %53 = arith.add %52, %13 : c32
; CHECK-NEXT: %54 = constant 1 : i32
; CHECK-NEXT: %55 = subgroup_broadcast %1, %54 : c32
; CHECK-NEXT: %56 = arith.re %55 : f32
; CHECK-NEXT: %57 = arith.im %55 : f32
; CHECK-NEXT: %58 = cast %56 : c32
; CHECK-NEXT: %59 = arith.mul %0, %58 : c32
; CHECK-NEXT: %60 = arith.add %59, %20 : c32
; CHECK-NEXT: %61 = cast %57 : c32
; CHECK-NEXT: %62 = arith.mul %0, %61 : c32
; CHECK-NEXT: %63 = arith.add %62, %23 : c32
; CHECK-NEXT: %64 = constant 2 : i32
; CHECK-NEXT: %65 = subgroup_broadcast %1, %64 : c32
; CHECK-NEXT: %66 = arith.re %65 : f32
; CHECK-NEXT: %67 = arith.im %65 : f32
; CHECK-NEXT: %68 = cast %66 : c32
; CHECK-NEXT: %69 = arith.mul %0, %68 : c32
; CHECK-NEXT: %70 = arith.add %69, %30 : c32
; CHECK-NEXT: %71 = cast %67 : c32
; CHECK-NEXT: %72 = arith.mul %0, %71 : c32
; CHECK-NEXT: %73 = arith.add %72, %33 : c32
; CHECK-NEXT: %74 = constant 3 : i32
; CHECK-NEXT: %75 = subgroup_broadcast %1, %74 : c32
; CHECK-NEXT: %76 = arith.re %75 : f32
; CHECK-NEXT: %77 = arith.im %75 : f32
; CHECK-NEXT: %78 = cast %76 : c32
; CHECK-NEXT: %79 = arith.mul %0, %78 : c32
; CHECK-NEXT: %80 = arith.add %79, %40 : c32
; CHECK-NEXT: %81 = cast %77 : c32
; CHECK-NEXT: %82 = arith.mul %0, %81 : c32
; CHECK-NEXT: %83 = arith.add %82, %43 : c32
; CHECK-NEXT: %84 = constant [0x0p+0,0x1p+0] : c32
; CHECK-NEXT: %85 = arith.mul %53, %84 : c32
; CHECK-NEXT: %86 = arith.add %50, %85 : c32
; CHECK-NEXT: %87 = arith.mul %63, %84 : c32
; CHECK-NEXT: %88 = arith.add %60, %87 : c32
; CHECK-NEXT: %89 = arith.mul %73, %84 : c32
; CHECK-NEXT: %90 = arith.add %70, %89 : c32
; CHECK-NEXT: %91 = arith.mul %83, %84 : c32
; CHECK-NEXT: %92 = arith.add %80, %91 : c32
}

func @coopmatrix_mul_add_ii_mixed() subgroup_size(16) {
    parallel {
        %a = constant 1 : coopmatrix<i16x16x2,matrix_a>
        %b = constant 2 : coopmatrix<i32x2x4,matrix_b>
        %c = constant 3 : coopmatrix<i64x16x4,matrix_acc>
        %c_next = cooperative_matrix_mul_add %a, %b, %c : coopmatrix<i32x16x4,matrix_acc>
    }
; CHECK-LABEL: func @coopmatrix_mul_add_ii_mixed({{.*}}
; CHECK:      %0 = constant 1 : i16
; CHECK-NEXT: %1 = constant 2 : i32
; CHECK-NEXT: %2 = constant 3 : i64
; CHECK-NEXT: %3 = constant 0 : i32
; CHECK-NEXT: %4 = subgroup_broadcast %1, %3 : i32
; CHECK-NEXT: %5 = cast %0 : i32
; CHECK-NEXT: %6 = arith.mul %5, %4 : i32
; CHECK-NEXT: %7 = cast %6 : i64
; CHECK-NEXT: %8 = arith.add %7, %2 : i64
; CHECK-NEXT: %9 = constant 1 : i32
; CHECK-NEXT: %10 = subgroup_broadcast %1, %9 : i32
; CHECK-NEXT: %11 = cast %0 : i32
; CHECK-NEXT: %12 = arith.mul %11, %10 : i32
; CHECK-NEXT: %13 = cast %12 : i64
; CHECK-NEXT: %14 = arith.add %13, %2 : i64
; CHECK-NEXT: %15 = constant 2 : i32
; CHECK-NEXT: %16 = subgroup_broadcast %1, %15 : i32
; CHECK-NEXT: %17 = cast %0 : i32
; CHECK-NEXT: %18 = arith.mul %17, %16 : i32
; CHECK-NEXT: %19 = cast %18 : i64
; CHECK-NEXT: %20 = arith.add %19, %2 : i64
; CHECK-NEXT: %21 = constant 3 : i32
; CHECK-NEXT: %22 = subgroup_broadcast %1, %21 : i32
; CHECK-NEXT: %23 = cast %0 : i32
; CHECK-NEXT: %24 = arith.mul %23, %22 : i32
; CHECK-NEXT: %25 = cast %24 : i64
; CHECK-NEXT: %26 = arith.add %25, %2 : i64
; CHECK-NEXT: %27 = constant 0 : i32
; CHECK-NEXT: %28 = subgroup_broadcast %1, %27 : i32
; CHECK-NEXT: %29 = cast %0 : i32
; CHECK-NEXT: %30 = arith.mul %29, %28 : i32
; CHECK-NEXT: %31 = cast %30 : i64
; CHECK-NEXT: %32 = arith.add %31, %8 : i64
; CHECK-NEXT: %33 = constant 1 : i32
; CHECK-NEXT: %34 = subgroup_broadcast %1, %33 : i32
; CHECK-NEXT: %35 = cast %0 : i32
; CHECK-NEXT: %36 = arith.mul %35, %34 : i32
; CHECK-NEXT: %37 = cast %36 : i64
; CHECK-NEXT: %38 = arith.add %37, %14 : i64
; CHECK-NEXT: %39 = constant 2 : i32
; CHECK-NEXT: %40 = subgroup_broadcast %1, %39 : i32
; CHECK-NEXT: %41 = cast %0 : i32
; CHECK-NEXT: %42 = arith.mul %41, %40 : i32
; CHECK-NEXT: %43 = cast %42 : i64
; CHECK-NEXT: %44 = arith.add %43, %20 : i64
; CHECK-NEXT: %45 = constant 3 : i32
; CHECK-NEXT: %46 = subgroup_broadcast %1, %45 : i32
; CHECK-NEXT: %47 = cast %0 : i32
; CHECK-NEXT: %48 = arith.mul %47, %46 : i32
; CHECK-NEXT: %49 = cast %48 : i64
; CHECK-NEXT: %50 = arith.add %49, %26 : i64
; CHECK-NEXT: %51 = cast %32 : i32
; CHECK-NEXT: %52 = cast %38 : i32
; CHECK-NEXT: %53 = cast %44 : i32
; CHECK-NEXT: %54 = cast %50 : i32
}
