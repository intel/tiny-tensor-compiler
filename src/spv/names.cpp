// Copyright (C) 2024 Intel Corporation
// SPDX-License-Identifier: BSD-3-Clause

// This file is generated
// Do not edit manually

#include "names.hpp"
#include "enums.hpp"

namespace tinytc::spv {

auto to_string(Op op) -> char const * {
    switch (op) {
    case Op::Nop:
        return "Nop";
    case Op::Undef:
        return "Undef";
    case Op::SourceContinued:
        return "SourceContinued";
    case Op::Source:
        return "Source";
    case Op::SourceExtension:
        return "SourceExtension";
    case Op::Name:
        return "Name";
    case Op::MemberName:
        return "MemberName";
    case Op::String:
        return "String";
    case Op::Line:
        return "Line";
    case Op::Extension:
        return "Extension";
    case Op::ExtInstImport:
        return "ExtInstImport";
    case Op::ExtInst:
        return "ExtInst";
    case Op::MemoryModel:
        return "MemoryModel";
    case Op::EntryPoint:
        return "EntryPoint";
    case Op::ExecutionMode:
        return "ExecutionMode";
    case Op::Capability:
        return "Capability";
    case Op::TypeVoid:
        return "TypeVoid";
    case Op::TypeBool:
        return "TypeBool";
    case Op::TypeInt:
        return "TypeInt";
    case Op::TypeFloat:
        return "TypeFloat";
    case Op::TypeVector:
        return "TypeVector";
    case Op::TypeMatrix:
        return "TypeMatrix";
    case Op::TypeImage:
        return "TypeImage";
    case Op::TypeSampler:
        return "TypeSampler";
    case Op::TypeSampledImage:
        return "TypeSampledImage";
    case Op::TypeArray:
        return "TypeArray";
    case Op::TypeRuntimeArray:
        return "TypeRuntimeArray";
    case Op::TypeStruct:
        return "TypeStruct";
    case Op::TypeOpaque:
        return "TypeOpaque";
    case Op::TypePointer:
        return "TypePointer";
    case Op::TypeFunction:
        return "TypeFunction";
    case Op::TypeEvent:
        return "TypeEvent";
    case Op::TypeDeviceEvent:
        return "TypeDeviceEvent";
    case Op::TypeReserveId:
        return "TypeReserveId";
    case Op::TypeQueue:
        return "TypeQueue";
    case Op::TypePipe:
        return "TypePipe";
    case Op::TypeForwardPointer:
        return "TypeForwardPointer";
    case Op::ConstantTrue:
        return "ConstantTrue";
    case Op::ConstantFalse:
        return "ConstantFalse";
    case Op::Constant:
        return "Constant";
    case Op::ConstantComposite:
        return "ConstantComposite";
    case Op::ConstantSampler:
        return "ConstantSampler";
    case Op::ConstantNull:
        return "ConstantNull";
    case Op::Function:
        return "Function";
    case Op::FunctionParameter:
        return "FunctionParameter";
    case Op::FunctionEnd:
        return "FunctionEnd";
    case Op::FunctionCall:
        return "FunctionCall";
    case Op::Variable:
        return "Variable";
    case Op::ImageTexelPointer:
        return "ImageTexelPointer";
    case Op::Load:
        return "Load";
    case Op::Store:
        return "Store";
    case Op::CopyMemory:
        return "CopyMemory";
    case Op::CopyMemorySized:
        return "CopyMemorySized";
    case Op::AccessChain:
        return "AccessChain";
    case Op::InBoundsAccessChain:
        return "InBoundsAccessChain";
    case Op::PtrAccessChain:
        return "PtrAccessChain";
    case Op::ArrayLength:
        return "ArrayLength";
    case Op::GenericPtrMemSemantics:
        return "GenericPtrMemSemantics";
    case Op::InBoundsPtrAccessChain:
        return "InBoundsPtrAccessChain";
    case Op::Decorate:
        return "Decorate";
    case Op::MemberDecorate:
        return "MemberDecorate";
    case Op::DecorationGroup:
        return "DecorationGroup";
    case Op::GroupDecorate:
        return "GroupDecorate";
    case Op::GroupMemberDecorate:
        return "GroupMemberDecorate";
    case Op::VectorExtractDynamic:
        return "VectorExtractDynamic";
    case Op::VectorInsertDynamic:
        return "VectorInsertDynamic";
    case Op::VectorShuffle:
        return "VectorShuffle";
    case Op::CompositeConstruct:
        return "CompositeConstruct";
    case Op::CompositeExtract:
        return "CompositeExtract";
    case Op::CompositeInsert:
        return "CompositeInsert";
    case Op::CopyObject:
        return "CopyObject";
    case Op::Transpose:
        return "Transpose";
    case Op::SampledImage:
        return "SampledImage";
    case Op::ImageSampleImplicitLod:
        return "ImageSampleImplicitLod";
    case Op::ImageSampleExplicitLod:
        return "ImageSampleExplicitLod";
    case Op::ImageSampleDrefImplicitLod:
        return "ImageSampleDrefImplicitLod";
    case Op::ImageSampleDrefExplicitLod:
        return "ImageSampleDrefExplicitLod";
    case Op::ImageSampleProjImplicitLod:
        return "ImageSampleProjImplicitLod";
    case Op::ImageSampleProjExplicitLod:
        return "ImageSampleProjExplicitLod";
    case Op::ImageSampleProjDrefImplicitLod:
        return "ImageSampleProjDrefImplicitLod";
    case Op::ImageSampleProjDrefExplicitLod:
        return "ImageSampleProjDrefExplicitLod";
    case Op::ImageFetch:
        return "ImageFetch";
    case Op::ImageGather:
        return "ImageGather";
    case Op::ImageDrefGather:
        return "ImageDrefGather";
    case Op::ImageRead:
        return "ImageRead";
    case Op::ImageWrite:
        return "ImageWrite";
    case Op::Image:
        return "Image";
    case Op::ImageQueryFormat:
        return "ImageQueryFormat";
    case Op::ImageQueryOrder:
        return "ImageQueryOrder";
    case Op::ImageQuerySizeLod:
        return "ImageQuerySizeLod";
    case Op::ImageQuerySize:
        return "ImageQuerySize";
    case Op::ImageQueryLod:
        return "ImageQueryLod";
    case Op::ImageQueryLevels:
        return "ImageQueryLevels";
    case Op::ImageQuerySamples:
        return "ImageQuerySamples";
    case Op::ConvertFToU:
        return "ConvertFToU";
    case Op::ConvertFToS:
        return "ConvertFToS";
    case Op::ConvertSToF:
        return "ConvertSToF";
    case Op::ConvertUToF:
        return "ConvertUToF";
    case Op::UConvert:
        return "UConvert";
    case Op::SConvert:
        return "SConvert";
    case Op::FConvert:
        return "FConvert";
    case Op::QuantizeToF16:
        return "QuantizeToF16";
    case Op::ConvertPtrToU:
        return "ConvertPtrToU";
    case Op::SatConvertSToU:
        return "SatConvertSToU";
    case Op::SatConvertUToS:
        return "SatConvertUToS";
    case Op::ConvertUToPtr:
        return "ConvertUToPtr";
    case Op::PtrCastToGeneric:
        return "PtrCastToGeneric";
    case Op::GenericCastToPtr:
        return "GenericCastToPtr";
    case Op::GenericCastToPtrExplicit:
        return "GenericCastToPtrExplicit";
    case Op::Bitcast:
        return "Bitcast";
    case Op::SNegate:
        return "SNegate";
    case Op::FNegate:
        return "FNegate";
    case Op::IAdd:
        return "IAdd";
    case Op::FAdd:
        return "FAdd";
    case Op::ISub:
        return "ISub";
    case Op::FSub:
        return "FSub";
    case Op::IMul:
        return "IMul";
    case Op::FMul:
        return "FMul";
    case Op::UDiv:
        return "UDiv";
    case Op::SDiv:
        return "SDiv";
    case Op::FDiv:
        return "FDiv";
    case Op::UMod:
        return "UMod";
    case Op::SRem:
        return "SRem";
    case Op::SMod:
        return "SMod";
    case Op::FRem:
        return "FRem";
    case Op::FMod:
        return "FMod";
    case Op::VectorTimesScalar:
        return "VectorTimesScalar";
    case Op::MatrixTimesScalar:
        return "MatrixTimesScalar";
    case Op::VectorTimesMatrix:
        return "VectorTimesMatrix";
    case Op::MatrixTimesVector:
        return "MatrixTimesVector";
    case Op::MatrixTimesMatrix:
        return "MatrixTimesMatrix";
    case Op::OuterProduct:
        return "OuterProduct";
    case Op::Dot:
        return "Dot";
    case Op::IAddCarry:
        return "IAddCarry";
    case Op::ISubBorrow:
        return "ISubBorrow";
    case Op::UMulExtended:
        return "UMulExtended";
    case Op::SMulExtended:
        return "SMulExtended";
    case Op::Any:
        return "Any";
    case Op::All:
        return "All";
    case Op::IsNan:
        return "IsNan";
    case Op::IsInf:
        return "IsInf";
    case Op::IsFinite:
        return "IsFinite";
    case Op::IsNormal:
        return "IsNormal";
    case Op::SignBitSet:
        return "SignBitSet";
    case Op::LessOrGreater:
        return "LessOrGreater";
    case Op::Ordered:
        return "Ordered";
    case Op::Unordered:
        return "Unordered";
    case Op::LogicalEqual:
        return "LogicalEqual";
    case Op::LogicalNotEqual:
        return "LogicalNotEqual";
    case Op::LogicalOr:
        return "LogicalOr";
    case Op::LogicalAnd:
        return "LogicalAnd";
    case Op::LogicalNot:
        return "LogicalNot";
    case Op::Select:
        return "Select";
    case Op::IEqual:
        return "IEqual";
    case Op::INotEqual:
        return "INotEqual";
    case Op::UGreaterThan:
        return "UGreaterThan";
    case Op::SGreaterThan:
        return "SGreaterThan";
    case Op::UGreaterThanEqual:
        return "UGreaterThanEqual";
    case Op::SGreaterThanEqual:
        return "SGreaterThanEqual";
    case Op::ULessThan:
        return "ULessThan";
    case Op::SLessThan:
        return "SLessThan";
    case Op::ULessThanEqual:
        return "ULessThanEqual";
    case Op::SLessThanEqual:
        return "SLessThanEqual";
    case Op::FOrdEqual:
        return "FOrdEqual";
    case Op::FUnordEqual:
        return "FUnordEqual";
    case Op::FOrdNotEqual:
        return "FOrdNotEqual";
    case Op::FUnordNotEqual:
        return "FUnordNotEqual";
    case Op::FOrdLessThan:
        return "FOrdLessThan";
    case Op::FUnordLessThan:
        return "FUnordLessThan";
    case Op::FOrdGreaterThan:
        return "FOrdGreaterThan";
    case Op::FUnordGreaterThan:
        return "FUnordGreaterThan";
    case Op::FOrdLessThanEqual:
        return "FOrdLessThanEqual";
    case Op::FUnordLessThanEqual:
        return "FUnordLessThanEqual";
    case Op::FOrdGreaterThanEqual:
        return "FOrdGreaterThanEqual";
    case Op::FUnordGreaterThanEqual:
        return "FUnordGreaterThanEqual";
    case Op::ShiftRightLogical:
        return "ShiftRightLogical";
    case Op::ShiftRightArithmetic:
        return "ShiftRightArithmetic";
    case Op::ShiftLeftLogical:
        return "ShiftLeftLogical";
    case Op::BitwiseOr:
        return "BitwiseOr";
    case Op::BitwiseXor:
        return "BitwiseXor";
    case Op::BitwiseAnd:
        return "BitwiseAnd";
    case Op::Not:
        return "Not";
    case Op::BitFieldInsert:
        return "BitFieldInsert";
    case Op::BitFieldSExtract:
        return "BitFieldSExtract";
    case Op::BitFieldUExtract:
        return "BitFieldUExtract";
    case Op::BitReverse:
        return "BitReverse";
    case Op::BitCount:
        return "BitCount";
    case Op::DPdx:
        return "DPdx";
    case Op::DPdy:
        return "DPdy";
    case Op::Fwidth:
        return "Fwidth";
    case Op::DPdxFine:
        return "DPdxFine";
    case Op::DPdyFine:
        return "DPdyFine";
    case Op::FwidthFine:
        return "FwidthFine";
    case Op::DPdxCoarse:
        return "DPdxCoarse";
    case Op::DPdyCoarse:
        return "DPdyCoarse";
    case Op::FwidthCoarse:
        return "FwidthCoarse";
    case Op::EmitVertex:
        return "EmitVertex";
    case Op::EndPrimitive:
        return "EndPrimitive";
    case Op::EmitStreamVertex:
        return "EmitStreamVertex";
    case Op::EndStreamPrimitive:
        return "EndStreamPrimitive";
    case Op::ControlBarrier:
        return "ControlBarrier";
    case Op::MemoryBarrier:
        return "MemoryBarrier";
    case Op::AtomicLoad:
        return "AtomicLoad";
    case Op::AtomicStore:
        return "AtomicStore";
    case Op::AtomicExchange:
        return "AtomicExchange";
    case Op::AtomicCompareExchange:
        return "AtomicCompareExchange";
    case Op::AtomicCompareExchangeWeak:
        return "AtomicCompareExchangeWeak";
    case Op::AtomicIIncrement:
        return "AtomicIIncrement";
    case Op::AtomicIDecrement:
        return "AtomicIDecrement";
    case Op::AtomicIAdd:
        return "AtomicIAdd";
    case Op::AtomicISub:
        return "AtomicISub";
    case Op::AtomicSMin:
        return "AtomicSMin";
    case Op::AtomicUMin:
        return "AtomicUMin";
    case Op::AtomicSMax:
        return "AtomicSMax";
    case Op::AtomicUMax:
        return "AtomicUMax";
    case Op::AtomicAnd:
        return "AtomicAnd";
    case Op::AtomicOr:
        return "AtomicOr";
    case Op::AtomicXor:
        return "AtomicXor";
    case Op::Phi:
        return "Phi";
    case Op::LoopMerge:
        return "LoopMerge";
    case Op::SelectionMerge:
        return "SelectionMerge";
    case Op::Label:
        return "Label";
    case Op::Branch:
        return "Branch";
    case Op::BranchConditional:
        return "BranchConditional";
    case Op::Switch:
        return "Switch";
    case Op::Kill:
        return "Kill";
    case Op::Return:
        return "Return";
    case Op::ReturnValue:
        return "ReturnValue";
    case Op::Unreachable:
        return "Unreachable";
    case Op::LifetimeStart:
        return "LifetimeStart";
    case Op::LifetimeStop:
        return "LifetimeStop";
    case Op::GroupAsyncCopy:
        return "GroupAsyncCopy";
    case Op::GroupWaitEvents:
        return "GroupWaitEvents";
    case Op::GroupAll:
        return "GroupAll";
    case Op::GroupAny:
        return "GroupAny";
    case Op::GroupBroadcast:
        return "GroupBroadcast";
    case Op::GroupIAdd:
        return "GroupIAdd";
    case Op::GroupFAdd:
        return "GroupFAdd";
    case Op::GroupFMin:
        return "GroupFMin";
    case Op::GroupUMin:
        return "GroupUMin";
    case Op::GroupSMin:
        return "GroupSMin";
    case Op::GroupFMax:
        return "GroupFMax";
    case Op::GroupUMax:
        return "GroupUMax";
    case Op::GroupSMax:
        return "GroupSMax";
    case Op::ReadPipe:
        return "ReadPipe";
    case Op::WritePipe:
        return "WritePipe";
    case Op::ReservedReadPipe:
        return "ReservedReadPipe";
    case Op::ReservedWritePipe:
        return "ReservedWritePipe";
    case Op::ReserveReadPipePackets:
        return "ReserveReadPipePackets";
    case Op::ReserveWritePipePackets:
        return "ReserveWritePipePackets";
    case Op::CommitReadPipe:
        return "CommitReadPipe";
    case Op::CommitWritePipe:
        return "CommitWritePipe";
    case Op::IsValidReserveId:
        return "IsValidReserveId";
    case Op::GetNumPipePackets:
        return "GetNumPipePackets";
    case Op::GetMaxPipePackets:
        return "GetMaxPipePackets";
    case Op::GroupReserveReadPipePackets:
        return "GroupReserveReadPipePackets";
    case Op::GroupReserveWritePipePackets:
        return "GroupReserveWritePipePackets";
    case Op::GroupCommitReadPipe:
        return "GroupCommitReadPipe";
    case Op::GroupCommitWritePipe:
        return "GroupCommitWritePipe";
    case Op::EnqueueMarker:
        return "EnqueueMarker";
    case Op::EnqueueKernel:
        return "EnqueueKernel";
    case Op::GetKernelNDrangeSubGroupCount:
        return "GetKernelNDrangeSubGroupCount";
    case Op::GetKernelNDrangeMaxSubGroupSize:
        return "GetKernelNDrangeMaxSubGroupSize";
    case Op::GetKernelWorkGroupSize:
        return "GetKernelWorkGroupSize";
    case Op::GetKernelPreferredWorkGroupSizeMultiple:
        return "GetKernelPreferredWorkGroupSizeMultiple";
    case Op::RetainEvent:
        return "RetainEvent";
    case Op::ReleaseEvent:
        return "ReleaseEvent";
    case Op::CreateUserEvent:
        return "CreateUserEvent";
    case Op::IsValidEvent:
        return "IsValidEvent";
    case Op::SetUserEventStatus:
        return "SetUserEventStatus";
    case Op::CaptureEventProfilingInfo:
        return "CaptureEventProfilingInfo";
    case Op::GetDefaultQueue:
        return "GetDefaultQueue";
    case Op::BuildNDRange:
        return "BuildNDRange";
    case Op::ImageSparseSampleImplicitLod:
        return "ImageSparseSampleImplicitLod";
    case Op::ImageSparseSampleExplicitLod:
        return "ImageSparseSampleExplicitLod";
    case Op::ImageSparseSampleDrefImplicitLod:
        return "ImageSparseSampleDrefImplicitLod";
    case Op::ImageSparseSampleDrefExplicitLod:
        return "ImageSparseSampleDrefExplicitLod";
    case Op::ImageSparseSampleProjImplicitLod:
        return "ImageSparseSampleProjImplicitLod";
    case Op::ImageSparseSampleProjExplicitLod:
        return "ImageSparseSampleProjExplicitLod";
    case Op::ImageSparseSampleProjDrefImplicitLod:
        return "ImageSparseSampleProjDrefImplicitLod";
    case Op::ImageSparseSampleProjDrefExplicitLod:
        return "ImageSparseSampleProjDrefExplicitLod";
    case Op::ImageSparseFetch:
        return "ImageSparseFetch";
    case Op::ImageSparseGather:
        return "ImageSparseGather";
    case Op::ImageSparseDrefGather:
        return "ImageSparseDrefGather";
    case Op::ImageSparseTexelsResident:
        return "ImageSparseTexelsResident";
    case Op::NoLine:
        return "NoLine";
    case Op::AtomicFlagTestAndSet:
        return "AtomicFlagTestAndSet";
    case Op::AtomicFlagClear:
        return "AtomicFlagClear";
    case Op::ImageSparseRead:
        return "ImageSparseRead";
    case Op::SizeOf:
        return "SizeOf";
    case Op::TypePipeStorage:
        return "TypePipeStorage";
    case Op::ConstantPipeStorage:
        return "ConstantPipeStorage";
    case Op::CreatePipeFromPipeStorage:
        return "CreatePipeFromPipeStorage";
    case Op::GetKernelLocalSizeForSubgroupCount:
        return "GetKernelLocalSizeForSubgroupCount";
    case Op::GetKernelMaxNumSubgroups:
        return "GetKernelMaxNumSubgroups";
    case Op::TypeNamedBarrier:
        return "TypeNamedBarrier";
    case Op::NamedBarrierInitialize:
        return "NamedBarrierInitialize";
    case Op::MemoryNamedBarrier:
        return "MemoryNamedBarrier";
    case Op::ModuleProcessed:
        return "ModuleProcessed";
    case Op::ExecutionModeId:
        return "ExecutionModeId";
    case Op::DecorateId:
        return "DecorateId";
    case Op::GroupNonUniformElect:
        return "GroupNonUniformElect";
    case Op::GroupNonUniformAll:
        return "GroupNonUniformAll";
    case Op::GroupNonUniformAny:
        return "GroupNonUniformAny";
    case Op::GroupNonUniformAllEqual:
        return "GroupNonUniformAllEqual";
    case Op::GroupNonUniformBroadcast:
        return "GroupNonUniformBroadcast";
    case Op::GroupNonUniformBroadcastFirst:
        return "GroupNonUniformBroadcastFirst";
    case Op::GroupNonUniformBallot:
        return "GroupNonUniformBallot";
    case Op::GroupNonUniformInverseBallot:
        return "GroupNonUniformInverseBallot";
    case Op::GroupNonUniformBallotBitExtract:
        return "GroupNonUniformBallotBitExtract";
    case Op::GroupNonUniformBallotBitCount:
        return "GroupNonUniformBallotBitCount";
    case Op::GroupNonUniformBallotFindLSB:
        return "GroupNonUniformBallotFindLSB";
    case Op::GroupNonUniformBallotFindMSB:
        return "GroupNonUniformBallotFindMSB";
    case Op::GroupNonUniformShuffle:
        return "GroupNonUniformShuffle";
    case Op::GroupNonUniformShuffleXor:
        return "GroupNonUniformShuffleXor";
    case Op::GroupNonUniformShuffleUp:
        return "GroupNonUniformShuffleUp";
    case Op::GroupNonUniformShuffleDown:
        return "GroupNonUniformShuffleDown";
    case Op::GroupNonUniformIAdd:
        return "GroupNonUniformIAdd";
    case Op::GroupNonUniformFAdd:
        return "GroupNonUniformFAdd";
    case Op::GroupNonUniformIMul:
        return "GroupNonUniformIMul";
    case Op::GroupNonUniformFMul:
        return "GroupNonUniformFMul";
    case Op::GroupNonUniformSMin:
        return "GroupNonUniformSMin";
    case Op::GroupNonUniformUMin:
        return "GroupNonUniformUMin";
    case Op::GroupNonUniformFMin:
        return "GroupNonUniformFMin";
    case Op::GroupNonUniformSMax:
        return "GroupNonUniformSMax";
    case Op::GroupNonUniformUMax:
        return "GroupNonUniformUMax";
    case Op::GroupNonUniformFMax:
        return "GroupNonUniformFMax";
    case Op::GroupNonUniformBitwiseAnd:
        return "GroupNonUniformBitwiseAnd";
    case Op::GroupNonUniformBitwiseOr:
        return "GroupNonUniformBitwiseOr";
    case Op::GroupNonUniformBitwiseXor:
        return "GroupNonUniformBitwiseXor";
    case Op::GroupNonUniformLogicalAnd:
        return "GroupNonUniformLogicalAnd";
    case Op::GroupNonUniformLogicalOr:
        return "GroupNonUniformLogicalOr";
    case Op::GroupNonUniformLogicalXor:
        return "GroupNonUniformLogicalXor";
    case Op::GroupNonUniformQuadBroadcast:
        return "GroupNonUniformQuadBroadcast";
    case Op::GroupNonUniformQuadSwap:
        return "GroupNonUniformQuadSwap";
    case Op::CopyLogical:
        return "CopyLogical";
    case Op::PtrEqual:
        return "PtrEqual";
    case Op::PtrNotEqual:
        return "PtrNotEqual";
    case Op::PtrDiff:
        return "PtrDiff";
    case Op::TypeCooperativeMatrixKHR:
        return "TypeCooperativeMatrixKHR";
    case Op::CooperativeMatrixLoadKHR:
        return "CooperativeMatrixLoadKHR";
    case Op::CooperativeMatrixStoreKHR:
        return "CooperativeMatrixStoreKHR";
    case Op::CooperativeMatrixMulAddKHR:
        return "CooperativeMatrixMulAddKHR";
    case Op::CooperativeMatrixLengthKHR:
        return "CooperativeMatrixLengthKHR";
    case Op::AtomicFMinEXT:
        return "AtomicFMinEXT";
    case Op::AtomicFMaxEXT:
        return "AtomicFMaxEXT";
    case Op::AtomicFAddEXT:
        return "AtomicFAddEXT";
    }
    return "unknown";
}
auto to_string(ImageOperands e) -> char const * {
    switch (e) {
    case ImageOperands::None:
        return "None";
    case ImageOperands::Bias:
        return "Bias";
    case ImageOperands::Lod:
        return "Lod";
    case ImageOperands::Grad:
        return "Grad";
    case ImageOperands::ConstOffset:
        return "ConstOffset";
    case ImageOperands::Offset:
        return "Offset";
    case ImageOperands::ConstOffsets:
        return "ConstOffsets";
    case ImageOperands::Sample:
        return "Sample";
    case ImageOperands::MinLod:
        return "MinLod";
    case ImageOperands::MakeTexelAvailable:
        return "MakeTexelAvailable";
    case ImageOperands::MakeTexelVisible:
        return "MakeTexelVisible";
    case ImageOperands::NonPrivateTexel:
        return "NonPrivateTexel";
    case ImageOperands::VolatileTexel:
        return "VolatileTexel";
    case ImageOperands::SignExtend:
        return "SignExtend";
    case ImageOperands::ZeroExtend:
        return "ZeroExtend";
    case ImageOperands::Nontemporal:
        return "Nontemporal";
    case ImageOperands::Offsets:
        return "Offsets";
    }
    return "unknown";
}
auto to_string(FPFastMathMode e) -> char const * {
    switch (e) {
    case FPFastMathMode::None:
        return "None";
    case FPFastMathMode::NotNaN:
        return "NotNaN";
    case FPFastMathMode::NotInf:
        return "NotInf";
    case FPFastMathMode::NSZ:
        return "NSZ";
    case FPFastMathMode::AllowRecip:
        return "AllowRecip";
    case FPFastMathMode::Fast:
        return "Fast";
    case FPFastMathMode::AllowContract:
        return "AllowContract";
    case FPFastMathMode::AllowReassoc:
        return "AllowReassoc";
    case FPFastMathMode::AllowTransform:
        return "AllowTransform";
    }
    return "unknown";
}
auto to_string(SelectionControl e) -> char const * {
    switch (e) {
    case SelectionControl::None:
        return "None";
    case SelectionControl::Flatten:
        return "Flatten";
    case SelectionControl::DontFlatten:
        return "DontFlatten";
    }
    return "unknown";
}
auto to_string(LoopControl e) -> char const * {
    switch (e) {
    case LoopControl::None:
        return "None";
    case LoopControl::Unroll:
        return "Unroll";
    case LoopControl::DontUnroll:
        return "DontUnroll";
    case LoopControl::DependencyInfinite:
        return "DependencyInfinite";
    case LoopControl::DependencyLength:
        return "DependencyLength";
    case LoopControl::MinIterations:
        return "MinIterations";
    case LoopControl::MaxIterations:
        return "MaxIterations";
    case LoopControl::IterationMultiple:
        return "IterationMultiple";
    case LoopControl::PeelCount:
        return "PeelCount";
    case LoopControl::PartialCount:
        return "PartialCount";
    case LoopControl::InitiationIntervalINTEL:
        return "InitiationIntervalINTEL";
    case LoopControl::MaxConcurrencyINTEL:
        return "MaxConcurrencyINTEL";
    case LoopControl::DependencyArrayINTEL:
        return "DependencyArrayINTEL";
    case LoopControl::PipelineEnableINTEL:
        return "PipelineEnableINTEL";
    case LoopControl::LoopCoalesceINTEL:
        return "LoopCoalesceINTEL";
    case LoopControl::MaxInterleavingINTEL:
        return "MaxInterleavingINTEL";
    case LoopControl::SpeculatedIterationsINTEL:
        return "SpeculatedIterationsINTEL";
    case LoopControl::NoFusionINTEL:
        return "NoFusionINTEL";
    case LoopControl::LoopCountINTEL:
        return "LoopCountINTEL";
    case LoopControl::MaxReinvocationDelayINTEL:
        return "MaxReinvocationDelayINTEL";
    }
    return "unknown";
}
auto to_string(FunctionControl e) -> char const * {
    switch (e) {
    case FunctionControl::None:
        return "None";
    case FunctionControl::Inline:
        return "Inline";
    case FunctionControl::DontInline:
        return "DontInline";
    case FunctionControl::Pure:
        return "Pure";
    case FunctionControl::Const:
        return "Const";
    case FunctionControl::OptNoneEXT:
        return "OptNoneEXT";
    }
    return "unknown";
}
auto to_string(MemorySemantics e) -> char const * {
    switch (e) {
    case MemorySemantics::Relaxed:
        return "Relaxed";
    case MemorySemantics::Acquire:
        return "Acquire";
    case MemorySemantics::Release:
        return "Release";
    case MemorySemantics::AcquireRelease:
        return "AcquireRelease";
    case MemorySemantics::SequentiallyConsistent:
        return "SequentiallyConsistent";
    case MemorySemantics::UniformMemory:
        return "UniformMemory";
    case MemorySemantics::SubgroupMemory:
        return "SubgroupMemory";
    case MemorySemantics::WorkgroupMemory:
        return "WorkgroupMemory";
    case MemorySemantics::CrossWorkgroupMemory:
        return "CrossWorkgroupMemory";
    case MemorySemantics::AtomicCounterMemory:
        return "AtomicCounterMemory";
    case MemorySemantics::ImageMemory:
        return "ImageMemory";
    case MemorySemantics::OutputMemory:
        return "OutputMemory";
    case MemorySemantics::MakeAvailable:
        return "MakeAvailable";
    case MemorySemantics::MakeVisible:
        return "MakeVisible";
    case MemorySemantics::Volatile:
        return "Volatile";
    }
    return "unknown";
}
auto to_string(MemoryAccess e) -> char const * {
    switch (e) {
    case MemoryAccess::None:
        return "None";
    case MemoryAccess::Volatile:
        return "Volatile";
    case MemoryAccess::Aligned:
        return "Aligned";
    case MemoryAccess::Nontemporal:
        return "Nontemporal";
    case MemoryAccess::MakePointerAvailable:
        return "MakePointerAvailable";
    case MemoryAccess::MakePointerVisible:
        return "MakePointerVisible";
    case MemoryAccess::NonPrivatePointer:
        return "NonPrivatePointer";
    case MemoryAccess::AliasScopeINTELMask:
        return "AliasScopeINTELMask";
    case MemoryAccess::NoAliasINTELMask:
        return "NoAliasINTELMask";
    }
    return "unknown";
}
auto to_string(KernelProfilingInfo e) -> char const * {
    switch (e) {
    case KernelProfilingInfo::None:
        return "None";
    case KernelProfilingInfo::CmdExecTime:
        return "CmdExecTime";
    }
    return "unknown";
}
auto to_string(RayFlags e) -> char const * {
    switch (e) {
    case RayFlags::NoneKHR:
        return "NoneKHR";
    case RayFlags::OpaqueKHR:
        return "OpaqueKHR";
    case RayFlags::NoOpaqueKHR:
        return "NoOpaqueKHR";
    case RayFlags::TerminateOnFirstHitKHR:
        return "TerminateOnFirstHitKHR";
    case RayFlags::SkipClosestHitShaderKHR:
        return "SkipClosestHitShaderKHR";
    case RayFlags::CullBackFacingTrianglesKHR:
        return "CullBackFacingTrianglesKHR";
    case RayFlags::CullFrontFacingTrianglesKHR:
        return "CullFrontFacingTrianglesKHR";
    case RayFlags::CullOpaqueKHR:
        return "CullOpaqueKHR";
    case RayFlags::CullNoOpaqueKHR:
        return "CullNoOpaqueKHR";
    case RayFlags::SkipTrianglesKHR:
        return "SkipTrianglesKHR";
    case RayFlags::SkipAABBsKHR:
        return "SkipAABBsKHR";
    case RayFlags::ForceOpacityMicromap2StateEXT:
        return "ForceOpacityMicromap2StateEXT";
    }
    return "unknown";
}
auto to_string(FragmentShadingRate e) -> char const * {
    switch (e) {
    case FragmentShadingRate::Vertical2Pixels:
        return "Vertical2Pixels";
    case FragmentShadingRate::Vertical4Pixels:
        return "Vertical4Pixels";
    case FragmentShadingRate::Horizontal2Pixels:
        return "Horizontal2Pixels";
    case FragmentShadingRate::Horizontal4Pixels:
        return "Horizontal4Pixels";
    }
    return "unknown";
}
auto to_string(RawAccessChainOperands e) -> char const * {
    switch (e) {
    case RawAccessChainOperands::None:
        return "None";
    case RawAccessChainOperands::RobustnessPerComponentNV:
        return "RobustnessPerComponentNV";
    case RawAccessChainOperands::RobustnessPerElementNV:
        return "RobustnessPerElementNV";
    }
    return "unknown";
}
auto to_string(SourceLanguage e) -> char const * {
    switch (e) {
    case SourceLanguage::Unknown:
        return "Unknown";
    case SourceLanguage::ESSL:
        return "ESSL";
    case SourceLanguage::GLSL:
        return "GLSL";
    case SourceLanguage::OpenCL_C:
        return "OpenCL_C";
    case SourceLanguage::OpenCL_CPP:
        return "OpenCL_CPP";
    case SourceLanguage::HLSL:
        return "HLSL";
    case SourceLanguage::CPP_for_OpenCL:
        return "CPP_for_OpenCL";
    case SourceLanguage::SYCL:
        return "SYCL";
    case SourceLanguage::HERO_C:
        return "HERO_C";
    case SourceLanguage::NZSL:
        return "NZSL";
    case SourceLanguage::WGSL:
        return "WGSL";
    case SourceLanguage::Slang:
        return "Slang";
    case SourceLanguage::Zig:
        return "Zig";
    }
    return "unknown";
}
auto to_string(ExecutionModel e) -> char const * {
    switch (e) {
    case ExecutionModel::Vertex:
        return "Vertex";
    case ExecutionModel::TessellationControl:
        return "TessellationControl";
    case ExecutionModel::TessellationEvaluation:
        return "TessellationEvaluation";
    case ExecutionModel::Geometry:
        return "Geometry";
    case ExecutionModel::Fragment:
        return "Fragment";
    case ExecutionModel::GLCompute:
        return "GLCompute";
    case ExecutionModel::Kernel:
        return "Kernel";
    case ExecutionModel::TaskNV:
        return "TaskNV";
    case ExecutionModel::MeshNV:
        return "MeshNV";
    case ExecutionModel::RayGenerationKHR:
        return "RayGenerationKHR";
    case ExecutionModel::IntersectionKHR:
        return "IntersectionKHR";
    case ExecutionModel::AnyHitKHR:
        return "AnyHitKHR";
    case ExecutionModel::ClosestHitKHR:
        return "ClosestHitKHR";
    case ExecutionModel::MissKHR:
        return "MissKHR";
    case ExecutionModel::CallableKHR:
        return "CallableKHR";
    case ExecutionModel::TaskEXT:
        return "TaskEXT";
    case ExecutionModel::MeshEXT:
        return "MeshEXT";
    }
    return "unknown";
}
auto to_string(AddressingModel e) -> char const * {
    switch (e) {
    case AddressingModel::Logical:
        return "Logical";
    case AddressingModel::Physical32:
        return "Physical32";
    case AddressingModel::Physical64:
        return "Physical64";
    case AddressingModel::PhysicalStorageBuffer64:
        return "PhysicalStorageBuffer64";
    }
    return "unknown";
}
auto to_string(MemoryModel e) -> char const * {
    switch (e) {
    case MemoryModel::Simple:
        return "Simple";
    case MemoryModel::GLSL450:
        return "GLSL450";
    case MemoryModel::OpenCL:
        return "OpenCL";
    case MemoryModel::Vulkan:
        return "Vulkan";
    }
    return "unknown";
}
auto to_string(ExecutionMode e) -> char const * {
    switch (e) {
    case ExecutionMode::Invocations:
        return "Invocations";
    case ExecutionMode::SpacingEqual:
        return "SpacingEqual";
    case ExecutionMode::SpacingFractionalEven:
        return "SpacingFractionalEven";
    case ExecutionMode::SpacingFractionalOdd:
        return "SpacingFractionalOdd";
    case ExecutionMode::VertexOrderCw:
        return "VertexOrderCw";
    case ExecutionMode::VertexOrderCcw:
        return "VertexOrderCcw";
    case ExecutionMode::PixelCenterInteger:
        return "PixelCenterInteger";
    case ExecutionMode::OriginUpperLeft:
        return "OriginUpperLeft";
    case ExecutionMode::OriginLowerLeft:
        return "OriginLowerLeft";
    case ExecutionMode::EarlyFragmentTests:
        return "EarlyFragmentTests";
    case ExecutionMode::PointMode:
        return "PointMode";
    case ExecutionMode::Xfb:
        return "Xfb";
    case ExecutionMode::DepthReplacing:
        return "DepthReplacing";
    case ExecutionMode::DepthGreater:
        return "DepthGreater";
    case ExecutionMode::DepthLess:
        return "DepthLess";
    case ExecutionMode::DepthUnchanged:
        return "DepthUnchanged";
    case ExecutionMode::LocalSize:
        return "LocalSize";
    case ExecutionMode::LocalSizeHint:
        return "LocalSizeHint";
    case ExecutionMode::InputPoints:
        return "InputPoints";
    case ExecutionMode::InputLines:
        return "InputLines";
    case ExecutionMode::InputLinesAdjacency:
        return "InputLinesAdjacency";
    case ExecutionMode::Triangles:
        return "Triangles";
    case ExecutionMode::InputTrianglesAdjacency:
        return "InputTrianglesAdjacency";
    case ExecutionMode::Quads:
        return "Quads";
    case ExecutionMode::Isolines:
        return "Isolines";
    case ExecutionMode::OutputVertices:
        return "OutputVertices";
    case ExecutionMode::OutputPoints:
        return "OutputPoints";
    case ExecutionMode::OutputLineStrip:
        return "OutputLineStrip";
    case ExecutionMode::OutputTriangleStrip:
        return "OutputTriangleStrip";
    case ExecutionMode::VecTypeHint:
        return "VecTypeHint";
    case ExecutionMode::ContractionOff:
        return "ContractionOff";
    case ExecutionMode::Initializer:
        return "Initializer";
    case ExecutionMode::Finalizer:
        return "Finalizer";
    case ExecutionMode::SubgroupSize:
        return "SubgroupSize";
    case ExecutionMode::SubgroupsPerWorkgroup:
        return "SubgroupsPerWorkgroup";
    case ExecutionMode::SubgroupsPerWorkgroupId:
        return "SubgroupsPerWorkgroupId";
    case ExecutionMode::LocalSizeId:
        return "LocalSizeId";
    case ExecutionMode::LocalSizeHintId:
        return "LocalSizeHintId";
    case ExecutionMode::NonCoherentColorAttachmentReadEXT:
        return "NonCoherentColorAttachmentReadEXT";
    case ExecutionMode::NonCoherentDepthAttachmentReadEXT:
        return "NonCoherentDepthAttachmentReadEXT";
    case ExecutionMode::NonCoherentStencilAttachmentReadEXT:
        return "NonCoherentStencilAttachmentReadEXT";
    case ExecutionMode::SubgroupUniformControlFlowKHR:
        return "SubgroupUniformControlFlowKHR";
    case ExecutionMode::PostDepthCoverage:
        return "PostDepthCoverage";
    case ExecutionMode::DenormPreserve:
        return "DenormPreserve";
    case ExecutionMode::DenormFlushToZero:
        return "DenormFlushToZero";
    case ExecutionMode::SignedZeroInfNanPreserve:
        return "SignedZeroInfNanPreserve";
    case ExecutionMode::RoundingModeRTE:
        return "RoundingModeRTE";
    case ExecutionMode::RoundingModeRTZ:
        return "RoundingModeRTZ";
    case ExecutionMode::EarlyAndLateFragmentTestsAMD:
        return "EarlyAndLateFragmentTestsAMD";
    case ExecutionMode::StencilRefReplacingEXT:
        return "StencilRefReplacingEXT";
    case ExecutionMode::CoalescingAMDX:
        return "CoalescingAMDX";
    case ExecutionMode::IsApiEntryAMDX:
        return "IsApiEntryAMDX";
    case ExecutionMode::MaxNodeRecursionAMDX:
        return "MaxNodeRecursionAMDX";
    case ExecutionMode::StaticNumWorkgroupsAMDX:
        return "StaticNumWorkgroupsAMDX";
    case ExecutionMode::ShaderIndexAMDX:
        return "ShaderIndexAMDX";
    case ExecutionMode::MaxNumWorkgroupsAMDX:
        return "MaxNumWorkgroupsAMDX";
    case ExecutionMode::StencilRefUnchangedFrontAMD:
        return "StencilRefUnchangedFrontAMD";
    case ExecutionMode::StencilRefGreaterFrontAMD:
        return "StencilRefGreaterFrontAMD";
    case ExecutionMode::StencilRefLessFrontAMD:
        return "StencilRefLessFrontAMD";
    case ExecutionMode::StencilRefUnchangedBackAMD:
        return "StencilRefUnchangedBackAMD";
    case ExecutionMode::StencilRefGreaterBackAMD:
        return "StencilRefGreaterBackAMD";
    case ExecutionMode::StencilRefLessBackAMD:
        return "StencilRefLessBackAMD";
    case ExecutionMode::QuadDerivativesKHR:
        return "QuadDerivativesKHR";
    case ExecutionMode::RequireFullQuadsKHR:
        return "RequireFullQuadsKHR";
    case ExecutionMode::SharesInputWithAMDX:
        return "SharesInputWithAMDX";
    case ExecutionMode::OutputLinesEXT:
        return "OutputLinesEXT";
    case ExecutionMode::OutputPrimitivesEXT:
        return "OutputPrimitivesEXT";
    case ExecutionMode::DerivativeGroupQuadsKHR:
        return "DerivativeGroupQuadsKHR";
    case ExecutionMode::DerivativeGroupLinearKHR:
        return "DerivativeGroupLinearKHR";
    case ExecutionMode::OutputTrianglesEXT:
        return "OutputTrianglesEXT";
    case ExecutionMode::PixelInterlockOrderedEXT:
        return "PixelInterlockOrderedEXT";
    case ExecutionMode::PixelInterlockUnorderedEXT:
        return "PixelInterlockUnorderedEXT";
    case ExecutionMode::SampleInterlockOrderedEXT:
        return "SampleInterlockOrderedEXT";
    case ExecutionMode::SampleInterlockUnorderedEXT:
        return "SampleInterlockUnorderedEXT";
    case ExecutionMode::ShadingRateInterlockOrderedEXT:
        return "ShadingRateInterlockOrderedEXT";
    case ExecutionMode::ShadingRateInterlockUnorderedEXT:
        return "ShadingRateInterlockUnorderedEXT";
    case ExecutionMode::SharedLocalMemorySizeINTEL:
        return "SharedLocalMemorySizeINTEL";
    case ExecutionMode::RoundingModeRTPINTEL:
        return "RoundingModeRTPINTEL";
    case ExecutionMode::RoundingModeRTNINTEL:
        return "RoundingModeRTNINTEL";
    case ExecutionMode::FloatingPointModeALTINTEL:
        return "FloatingPointModeALTINTEL";
    case ExecutionMode::FloatingPointModeIEEEINTEL:
        return "FloatingPointModeIEEEINTEL";
    case ExecutionMode::MaxWorkgroupSizeINTEL:
        return "MaxWorkgroupSizeINTEL";
    case ExecutionMode::MaxWorkDimINTEL:
        return "MaxWorkDimINTEL";
    case ExecutionMode::NoGlobalOffsetINTEL:
        return "NoGlobalOffsetINTEL";
    case ExecutionMode::NumSIMDWorkitemsINTEL:
        return "NumSIMDWorkitemsINTEL";
    case ExecutionMode::SchedulerTargetFmaxMhzINTEL:
        return "SchedulerTargetFmaxMhzINTEL";
    case ExecutionMode::MaximallyReconvergesKHR:
        return "MaximallyReconvergesKHR";
    case ExecutionMode::FPFastMathDefault:
        return "FPFastMathDefault";
    case ExecutionMode::StreamingInterfaceINTEL:
        return "StreamingInterfaceINTEL";
    case ExecutionMode::RegisterMapInterfaceINTEL:
        return "RegisterMapInterfaceINTEL";
    case ExecutionMode::NamedBarrierCountINTEL:
        return "NamedBarrierCountINTEL";
    case ExecutionMode::MaximumRegistersINTEL:
        return "MaximumRegistersINTEL";
    case ExecutionMode::MaximumRegistersIdINTEL:
        return "MaximumRegistersIdINTEL";
    case ExecutionMode::NamedMaximumRegistersINTEL:
        return "NamedMaximumRegistersINTEL";
    }
    return "unknown";
}
auto to_string(StorageClass e) -> char const * {
    switch (e) {
    case StorageClass::UniformConstant:
        return "UniformConstant";
    case StorageClass::Input:
        return "Input";
    case StorageClass::Uniform:
        return "Uniform";
    case StorageClass::Output:
        return "Output";
    case StorageClass::Workgroup:
        return "Workgroup";
    case StorageClass::CrossWorkgroup:
        return "CrossWorkgroup";
    case StorageClass::Private:
        return "Private";
    case StorageClass::Function:
        return "Function";
    case StorageClass::Generic:
        return "Generic";
    case StorageClass::PushConstant:
        return "PushConstant";
    case StorageClass::AtomicCounter:
        return "AtomicCounter";
    case StorageClass::Image:
        return "Image";
    case StorageClass::StorageBuffer:
        return "StorageBuffer";
    case StorageClass::TileImageEXT:
        return "TileImageEXT";
    case StorageClass::NodePayloadAMDX:
        return "NodePayloadAMDX";
    case StorageClass::CallableDataKHR:
        return "CallableDataKHR";
    case StorageClass::IncomingCallableDataKHR:
        return "IncomingCallableDataKHR";
    case StorageClass::RayPayloadKHR:
        return "RayPayloadKHR";
    case StorageClass::HitAttributeKHR:
        return "HitAttributeKHR";
    case StorageClass::IncomingRayPayloadKHR:
        return "IncomingRayPayloadKHR";
    case StorageClass::ShaderRecordBufferKHR:
        return "ShaderRecordBufferKHR";
    case StorageClass::PhysicalStorageBuffer:
        return "PhysicalStorageBuffer";
    case StorageClass::HitObjectAttributeNV:
        return "HitObjectAttributeNV";
    case StorageClass::TaskPayloadWorkgroupEXT:
        return "TaskPayloadWorkgroupEXT";
    case StorageClass::CodeSectionINTEL:
        return "CodeSectionINTEL";
    case StorageClass::DeviceOnlyINTEL:
        return "DeviceOnlyINTEL";
    case StorageClass::HostOnlyINTEL:
        return "HostOnlyINTEL";
    }
    return "unknown";
}
auto to_string(Dim e) -> char const * {
    switch (e) {
    case Dim::Dim1D:
        return "Dim1D";
    case Dim::Dim2D:
        return "Dim2D";
    case Dim::Dim3D:
        return "Dim3D";
    case Dim::Cube:
        return "Cube";
    case Dim::Rect:
        return "Rect";
    case Dim::Buffer:
        return "Buffer";
    case Dim::SubpassData:
        return "SubpassData";
    case Dim::TileImageDataEXT:
        return "TileImageDataEXT";
    }
    return "unknown";
}
auto to_string(SamplerAddressingMode e) -> char const * {
    switch (e) {
    case SamplerAddressingMode::None:
        return "None";
    case SamplerAddressingMode::ClampToEdge:
        return "ClampToEdge";
    case SamplerAddressingMode::Clamp:
        return "Clamp";
    case SamplerAddressingMode::Repeat:
        return "Repeat";
    case SamplerAddressingMode::RepeatMirrored:
        return "RepeatMirrored";
    }
    return "unknown";
}
auto to_string(SamplerFilterMode e) -> char const * {
    switch (e) {
    case SamplerFilterMode::Nearest:
        return "Nearest";
    case SamplerFilterMode::Linear:
        return "Linear";
    }
    return "unknown";
}
auto to_string(ImageFormat e) -> char const * {
    switch (e) {
    case ImageFormat::Unknown:
        return "Unknown";
    case ImageFormat::Rgba32f:
        return "Rgba32f";
    case ImageFormat::Rgba16f:
        return "Rgba16f";
    case ImageFormat::R32f:
        return "R32f";
    case ImageFormat::Rgba8:
        return "Rgba8";
    case ImageFormat::Rgba8Snorm:
        return "Rgba8Snorm";
    case ImageFormat::Rg32f:
        return "Rg32f";
    case ImageFormat::Rg16f:
        return "Rg16f";
    case ImageFormat::R11fG11fB10f:
        return "R11fG11fB10f";
    case ImageFormat::R16f:
        return "R16f";
    case ImageFormat::Rgba16:
        return "Rgba16";
    case ImageFormat::Rgb10A2:
        return "Rgb10A2";
    case ImageFormat::Rg16:
        return "Rg16";
    case ImageFormat::Rg8:
        return "Rg8";
    case ImageFormat::R16:
        return "R16";
    case ImageFormat::R8:
        return "R8";
    case ImageFormat::Rgba16Snorm:
        return "Rgba16Snorm";
    case ImageFormat::Rg16Snorm:
        return "Rg16Snorm";
    case ImageFormat::Rg8Snorm:
        return "Rg8Snorm";
    case ImageFormat::R16Snorm:
        return "R16Snorm";
    case ImageFormat::R8Snorm:
        return "R8Snorm";
    case ImageFormat::Rgba32i:
        return "Rgba32i";
    case ImageFormat::Rgba16i:
        return "Rgba16i";
    case ImageFormat::Rgba8i:
        return "Rgba8i";
    case ImageFormat::R32i:
        return "R32i";
    case ImageFormat::Rg32i:
        return "Rg32i";
    case ImageFormat::Rg16i:
        return "Rg16i";
    case ImageFormat::Rg8i:
        return "Rg8i";
    case ImageFormat::R16i:
        return "R16i";
    case ImageFormat::R8i:
        return "R8i";
    case ImageFormat::Rgba32ui:
        return "Rgba32ui";
    case ImageFormat::Rgba16ui:
        return "Rgba16ui";
    case ImageFormat::Rgba8ui:
        return "Rgba8ui";
    case ImageFormat::R32ui:
        return "R32ui";
    case ImageFormat::Rgb10a2ui:
        return "Rgb10a2ui";
    case ImageFormat::Rg32ui:
        return "Rg32ui";
    case ImageFormat::Rg16ui:
        return "Rg16ui";
    case ImageFormat::Rg8ui:
        return "Rg8ui";
    case ImageFormat::R16ui:
        return "R16ui";
    case ImageFormat::R8ui:
        return "R8ui";
    case ImageFormat::R64ui:
        return "R64ui";
    case ImageFormat::R64i:
        return "R64i";
    }
    return "unknown";
}
auto to_string(ImageChannelOrder e) -> char const * {
    switch (e) {
    case ImageChannelOrder::R:
        return "R";
    case ImageChannelOrder::A:
        return "A";
    case ImageChannelOrder::RG:
        return "RG";
    case ImageChannelOrder::RA:
        return "RA";
    case ImageChannelOrder::RGB:
        return "RGB";
    case ImageChannelOrder::RGBA:
        return "RGBA";
    case ImageChannelOrder::BGRA:
        return "BGRA";
    case ImageChannelOrder::ARGB:
        return "ARGB";
    case ImageChannelOrder::Intensity:
        return "Intensity";
    case ImageChannelOrder::Luminance:
        return "Luminance";
    case ImageChannelOrder::Rx:
        return "Rx";
    case ImageChannelOrder::RGx:
        return "RGx";
    case ImageChannelOrder::RGBx:
        return "RGBx";
    case ImageChannelOrder::Depth:
        return "Depth";
    case ImageChannelOrder::DepthStencil:
        return "DepthStencil";
    case ImageChannelOrder::sRGB:
        return "sRGB";
    case ImageChannelOrder::sRGBx:
        return "sRGBx";
    case ImageChannelOrder::sRGBA:
        return "sRGBA";
    case ImageChannelOrder::sBGRA:
        return "sBGRA";
    case ImageChannelOrder::ABGR:
        return "ABGR";
    }
    return "unknown";
}
auto to_string(ImageChannelDataType e) -> char const * {
    switch (e) {
    case ImageChannelDataType::SnormInt8:
        return "SnormInt8";
    case ImageChannelDataType::SnormInt16:
        return "SnormInt16";
    case ImageChannelDataType::UnormInt8:
        return "UnormInt8";
    case ImageChannelDataType::UnormInt16:
        return "UnormInt16";
    case ImageChannelDataType::UnormShort565:
        return "UnormShort565";
    case ImageChannelDataType::UnormShort555:
        return "UnormShort555";
    case ImageChannelDataType::UnormInt101010:
        return "UnormInt101010";
    case ImageChannelDataType::SignedInt8:
        return "SignedInt8";
    case ImageChannelDataType::SignedInt16:
        return "SignedInt16";
    case ImageChannelDataType::SignedInt32:
        return "SignedInt32";
    case ImageChannelDataType::UnsignedInt8:
        return "UnsignedInt8";
    case ImageChannelDataType::UnsignedInt16:
        return "UnsignedInt16";
    case ImageChannelDataType::UnsignedInt32:
        return "UnsignedInt32";
    case ImageChannelDataType::HalfFloat:
        return "HalfFloat";
    case ImageChannelDataType::Float:
        return "Float";
    case ImageChannelDataType::UnormInt24:
        return "UnormInt24";
    case ImageChannelDataType::UnormInt101010_2:
        return "UnormInt101010_2";
    case ImageChannelDataType::UnsignedIntRaw10EXT:
        return "UnsignedIntRaw10EXT";
    case ImageChannelDataType::UnsignedIntRaw12EXT:
        return "UnsignedIntRaw12EXT";
    case ImageChannelDataType::UnormInt2_101010EXT:
        return "UnormInt2_101010EXT";
    }
    return "unknown";
}
auto to_string(FPRoundingMode e) -> char const * {
    switch (e) {
    case FPRoundingMode::RTE:
        return "RTE";
    case FPRoundingMode::RTZ:
        return "RTZ";
    case FPRoundingMode::RTP:
        return "RTP";
    case FPRoundingMode::RTN:
        return "RTN";
    }
    return "unknown";
}
auto to_string(FPDenormMode e) -> char const * {
    switch (e) {
    case FPDenormMode::Preserve:
        return "Preserve";
    case FPDenormMode::FlushToZero:
        return "FlushToZero";
    }
    return "unknown";
}
auto to_string(QuantizationModes e) -> char const * {
    switch (e) {
    case QuantizationModes::TRN:
        return "TRN";
    case QuantizationModes::TRN_ZERO:
        return "TRN_ZERO";
    case QuantizationModes::RND:
        return "RND";
    case QuantizationModes::RND_ZERO:
        return "RND_ZERO";
    case QuantizationModes::RND_INF:
        return "RND_INF";
    case QuantizationModes::RND_MIN_INF:
        return "RND_MIN_INF";
    case QuantizationModes::RND_CONV:
        return "RND_CONV";
    case QuantizationModes::RND_CONV_ODD:
        return "RND_CONV_ODD";
    }
    return "unknown";
}
auto to_string(FPOperationMode e) -> char const * {
    switch (e) {
    case FPOperationMode::IEEE:
        return "IEEE";
    case FPOperationMode::ALT:
        return "ALT";
    }
    return "unknown";
}
auto to_string(OverflowModes e) -> char const * {
    switch (e) {
    case OverflowModes::WRAP:
        return "WRAP";
    case OverflowModes::SAT:
        return "SAT";
    case OverflowModes::SAT_ZERO:
        return "SAT_ZERO";
    case OverflowModes::SAT_SYM:
        return "SAT_SYM";
    }
    return "unknown";
}
auto to_string(LinkageType e) -> char const * {
    switch (e) {
    case LinkageType::Export:
        return "Export";
    case LinkageType::Import:
        return "Import";
    case LinkageType::LinkOnceODR:
        return "LinkOnceODR";
    }
    return "unknown";
}
auto to_string(AccessQualifier e) -> char const * {
    switch (e) {
    case AccessQualifier::ReadOnly:
        return "ReadOnly";
    case AccessQualifier::WriteOnly:
        return "WriteOnly";
    case AccessQualifier::ReadWrite:
        return "ReadWrite";
    }
    return "unknown";
}
auto to_string(HostAccessQualifier e) -> char const * {
    switch (e) {
    case HostAccessQualifier::NoneINTEL:
        return "NoneINTEL";
    case HostAccessQualifier::ReadINTEL:
        return "ReadINTEL";
    case HostAccessQualifier::WriteINTEL:
        return "WriteINTEL";
    case HostAccessQualifier::ReadWriteINTEL:
        return "ReadWriteINTEL";
    }
    return "unknown";
}
auto to_string(FunctionParameterAttribute e) -> char const * {
    switch (e) {
    case FunctionParameterAttribute::Zext:
        return "Zext";
    case FunctionParameterAttribute::Sext:
        return "Sext";
    case FunctionParameterAttribute::ByVal:
        return "ByVal";
    case FunctionParameterAttribute::Sret:
        return "Sret";
    case FunctionParameterAttribute::NoAlias:
        return "NoAlias";
    case FunctionParameterAttribute::NoCapture:
        return "NoCapture";
    case FunctionParameterAttribute::NoWrite:
        return "NoWrite";
    case FunctionParameterAttribute::NoReadWrite:
        return "NoReadWrite";
    case FunctionParameterAttribute::RuntimeAlignedINTEL:
        return "RuntimeAlignedINTEL";
    }
    return "unknown";
}
auto to_string(Decoration e) -> char const * {
    switch (e) {
    case Decoration::RelaxedPrecision:
        return "RelaxedPrecision";
    case Decoration::SpecId:
        return "SpecId";
    case Decoration::Block:
        return "Block";
    case Decoration::BufferBlock:
        return "BufferBlock";
    case Decoration::RowMajor:
        return "RowMajor";
    case Decoration::ColMajor:
        return "ColMajor";
    case Decoration::ArrayStride:
        return "ArrayStride";
    case Decoration::MatrixStride:
        return "MatrixStride";
    case Decoration::GLSLShared:
        return "GLSLShared";
    case Decoration::GLSLPacked:
        return "GLSLPacked";
    case Decoration::CPacked:
        return "CPacked";
    case Decoration::BuiltIn:
        return "BuiltIn";
    case Decoration::NoPerspective:
        return "NoPerspective";
    case Decoration::Flat:
        return "Flat";
    case Decoration::Patch:
        return "Patch";
    case Decoration::Centroid:
        return "Centroid";
    case Decoration::Sample:
        return "Sample";
    case Decoration::Invariant:
        return "Invariant";
    case Decoration::Restrict:
        return "Restrict";
    case Decoration::Aliased:
        return "Aliased";
    case Decoration::Volatile:
        return "Volatile";
    case Decoration::Constant:
        return "Constant";
    case Decoration::Coherent:
        return "Coherent";
    case Decoration::NonWritable:
        return "NonWritable";
    case Decoration::NonReadable:
        return "NonReadable";
    case Decoration::Uniform:
        return "Uniform";
    case Decoration::UniformId:
        return "UniformId";
    case Decoration::SaturatedConversion:
        return "SaturatedConversion";
    case Decoration::Stream:
        return "Stream";
    case Decoration::Location:
        return "Location";
    case Decoration::Component:
        return "Component";
    case Decoration::Index:
        return "Index";
    case Decoration::Binding:
        return "Binding";
    case Decoration::DescriptorSet:
        return "DescriptorSet";
    case Decoration::Offset:
        return "Offset";
    case Decoration::XfbBuffer:
        return "XfbBuffer";
    case Decoration::XfbStride:
        return "XfbStride";
    case Decoration::FuncParamAttr:
        return "FuncParamAttr";
    case Decoration::FPRoundingMode:
        return "FPRoundingMode";
    case Decoration::FPFastMathMode:
        return "FPFastMathMode";
    case Decoration::LinkageAttributes:
        return "LinkageAttributes";
    case Decoration::NoContraction:
        return "NoContraction";
    case Decoration::InputAttachmentIndex:
        return "InputAttachmentIndex";
    case Decoration::Alignment:
        return "Alignment";
    case Decoration::MaxByteOffset:
        return "MaxByteOffset";
    case Decoration::AlignmentId:
        return "AlignmentId";
    case Decoration::MaxByteOffsetId:
        return "MaxByteOffsetId";
    case Decoration::NoSignedWrap:
        return "NoSignedWrap";
    case Decoration::NoUnsignedWrap:
        return "NoUnsignedWrap";
    case Decoration::WeightTextureQCOM:
        return "WeightTextureQCOM";
    case Decoration::BlockMatchTextureQCOM:
        return "BlockMatchTextureQCOM";
    case Decoration::BlockMatchSamplerQCOM:
        return "BlockMatchSamplerQCOM";
    case Decoration::ExplicitInterpAMD:
        return "ExplicitInterpAMD";
    case Decoration::NodeSharesPayloadLimitsWithAMDX:
        return "NodeSharesPayloadLimitsWithAMDX";
    case Decoration::NodeMaxPayloadsAMDX:
        return "NodeMaxPayloadsAMDX";
    case Decoration::TrackFinishWritingAMDX:
        return "TrackFinishWritingAMDX";
    case Decoration::PayloadNodeNameAMDX:
        return "PayloadNodeNameAMDX";
    case Decoration::PayloadNodeBaseIndexAMDX:
        return "PayloadNodeBaseIndexAMDX";
    case Decoration::PayloadNodeSparseArrayAMDX:
        return "PayloadNodeSparseArrayAMDX";
    case Decoration::PayloadNodeArraySizeAMDX:
        return "PayloadNodeArraySizeAMDX";
    case Decoration::PayloadDispatchIndirectAMDX:
        return "PayloadDispatchIndirectAMDX";
    case Decoration::OverrideCoverageNV:
        return "OverrideCoverageNV";
    case Decoration::PassthroughNV:
        return "PassthroughNV";
    case Decoration::ViewportRelativeNV:
        return "ViewportRelativeNV";
    case Decoration::SecondaryViewportRelativeNV:
        return "SecondaryViewportRelativeNV";
    case Decoration::PerPrimitiveEXT:
        return "PerPrimitiveEXT";
    case Decoration::PerViewNV:
        return "PerViewNV";
    case Decoration::PerTaskNV:
        return "PerTaskNV";
    case Decoration::PerVertexKHR:
        return "PerVertexKHR";
    case Decoration::NonUniform:
        return "NonUniform";
    case Decoration::RestrictPointer:
        return "RestrictPointer";
    case Decoration::AliasedPointer:
        return "AliasedPointer";
    case Decoration::HitObjectShaderRecordBufferNV:
        return "HitObjectShaderRecordBufferNV";
    case Decoration::BindlessSamplerNV:
        return "BindlessSamplerNV";
    case Decoration::BindlessImageNV:
        return "BindlessImageNV";
    case Decoration::BoundSamplerNV:
        return "BoundSamplerNV";
    case Decoration::BoundImageNV:
        return "BoundImageNV";
    case Decoration::SIMTCallINTEL:
        return "SIMTCallINTEL";
    case Decoration::ReferencedIndirectlyINTEL:
        return "ReferencedIndirectlyINTEL";
    case Decoration::ClobberINTEL:
        return "ClobberINTEL";
    case Decoration::SideEffectsINTEL:
        return "SideEffectsINTEL";
    case Decoration::VectorComputeVariableINTEL:
        return "VectorComputeVariableINTEL";
    case Decoration::FuncParamIOKindINTEL:
        return "FuncParamIOKindINTEL";
    case Decoration::VectorComputeFunctionINTEL:
        return "VectorComputeFunctionINTEL";
    case Decoration::StackCallINTEL:
        return "StackCallINTEL";
    case Decoration::GlobalVariableOffsetINTEL:
        return "GlobalVariableOffsetINTEL";
    case Decoration::CounterBuffer:
        return "CounterBuffer";
    case Decoration::UserSemantic:
        return "UserSemantic";
    case Decoration::UserTypeGOOGLE:
        return "UserTypeGOOGLE";
    case Decoration::FunctionRoundingModeINTEL:
        return "FunctionRoundingModeINTEL";
    case Decoration::FunctionDenormModeINTEL:
        return "FunctionDenormModeINTEL";
    case Decoration::RegisterINTEL:
        return "RegisterINTEL";
    case Decoration::MemoryINTEL:
        return "MemoryINTEL";
    case Decoration::NumbanksINTEL:
        return "NumbanksINTEL";
    case Decoration::BankwidthINTEL:
        return "BankwidthINTEL";
    case Decoration::MaxPrivateCopiesINTEL:
        return "MaxPrivateCopiesINTEL";
    case Decoration::SinglepumpINTEL:
        return "SinglepumpINTEL";
    case Decoration::DoublepumpINTEL:
        return "DoublepumpINTEL";
    case Decoration::MaxReplicatesINTEL:
        return "MaxReplicatesINTEL";
    case Decoration::SimpleDualPortINTEL:
        return "SimpleDualPortINTEL";
    case Decoration::MergeINTEL:
        return "MergeINTEL";
    case Decoration::BankBitsINTEL:
        return "BankBitsINTEL";
    case Decoration::ForcePow2DepthINTEL:
        return "ForcePow2DepthINTEL";
    case Decoration::StridesizeINTEL:
        return "StridesizeINTEL";
    case Decoration::WordsizeINTEL:
        return "WordsizeINTEL";
    case Decoration::TrueDualPortINTEL:
        return "TrueDualPortINTEL";
    case Decoration::BurstCoalesceINTEL:
        return "BurstCoalesceINTEL";
    case Decoration::CacheSizeINTEL:
        return "CacheSizeINTEL";
    case Decoration::DontStaticallyCoalesceINTEL:
        return "DontStaticallyCoalesceINTEL";
    case Decoration::PrefetchINTEL:
        return "PrefetchINTEL";
    case Decoration::StallEnableINTEL:
        return "StallEnableINTEL";
    case Decoration::FuseLoopsInFunctionINTEL:
        return "FuseLoopsInFunctionINTEL";
    case Decoration::MathOpDSPModeINTEL:
        return "MathOpDSPModeINTEL";
    case Decoration::AliasScopeINTEL:
        return "AliasScopeINTEL";
    case Decoration::NoAliasINTEL:
        return "NoAliasINTEL";
    case Decoration::InitiationIntervalINTEL:
        return "InitiationIntervalINTEL";
    case Decoration::MaxConcurrencyINTEL:
        return "MaxConcurrencyINTEL";
    case Decoration::PipelineEnableINTEL:
        return "PipelineEnableINTEL";
    case Decoration::BufferLocationINTEL:
        return "BufferLocationINTEL";
    case Decoration::IOPipeStorageINTEL:
        return "IOPipeStorageINTEL";
    case Decoration::FunctionFloatingPointModeINTEL:
        return "FunctionFloatingPointModeINTEL";
    case Decoration::SingleElementVectorINTEL:
        return "SingleElementVectorINTEL";
    case Decoration::VectorComputeCallableFunctionINTEL:
        return "VectorComputeCallableFunctionINTEL";
    case Decoration::MediaBlockIOINTEL:
        return "MediaBlockIOINTEL";
    case Decoration::StallFreeINTEL:
        return "StallFreeINTEL";
    case Decoration::FPMaxErrorDecorationINTEL:
        return "FPMaxErrorDecorationINTEL";
    case Decoration::LatencyControlLabelINTEL:
        return "LatencyControlLabelINTEL";
    case Decoration::LatencyControlConstraintINTEL:
        return "LatencyControlConstraintINTEL";
    case Decoration::ConduitKernelArgumentINTEL:
        return "ConduitKernelArgumentINTEL";
    case Decoration::RegisterMapKernelArgumentINTEL:
        return "RegisterMapKernelArgumentINTEL";
    case Decoration::MMHostInterfaceAddressWidthINTEL:
        return "MMHostInterfaceAddressWidthINTEL";
    case Decoration::MMHostInterfaceDataWidthINTEL:
        return "MMHostInterfaceDataWidthINTEL";
    case Decoration::MMHostInterfaceLatencyINTEL:
        return "MMHostInterfaceLatencyINTEL";
    case Decoration::MMHostInterfaceReadWriteModeINTEL:
        return "MMHostInterfaceReadWriteModeINTEL";
    case Decoration::MMHostInterfaceMaxBurstINTEL:
        return "MMHostInterfaceMaxBurstINTEL";
    case Decoration::MMHostInterfaceWaitRequestINTEL:
        return "MMHostInterfaceWaitRequestINTEL";
    case Decoration::StableKernelArgumentINTEL:
        return "StableKernelArgumentINTEL";
    case Decoration::HostAccessINTEL:
        return "HostAccessINTEL";
    case Decoration::InitModeINTEL:
        return "InitModeINTEL";
    case Decoration::ImplementInRegisterMapINTEL:
        return "ImplementInRegisterMapINTEL";
    case Decoration::CacheControlLoadINTEL:
        return "CacheControlLoadINTEL";
    case Decoration::CacheControlStoreINTEL:
        return "CacheControlStoreINTEL";
    }
    return "unknown";
}
auto to_string(BuiltIn e) -> char const * {
    switch (e) {
    case BuiltIn::Position:
        return "Position";
    case BuiltIn::PointSize:
        return "PointSize";
    case BuiltIn::ClipDistance:
        return "ClipDistance";
    case BuiltIn::CullDistance:
        return "CullDistance";
    case BuiltIn::VertexId:
        return "VertexId";
    case BuiltIn::InstanceId:
        return "InstanceId";
    case BuiltIn::PrimitiveId:
        return "PrimitiveId";
    case BuiltIn::InvocationId:
        return "InvocationId";
    case BuiltIn::Layer:
        return "Layer";
    case BuiltIn::ViewportIndex:
        return "ViewportIndex";
    case BuiltIn::TessLevelOuter:
        return "TessLevelOuter";
    case BuiltIn::TessLevelInner:
        return "TessLevelInner";
    case BuiltIn::TessCoord:
        return "TessCoord";
    case BuiltIn::PatchVertices:
        return "PatchVertices";
    case BuiltIn::FragCoord:
        return "FragCoord";
    case BuiltIn::PointCoord:
        return "PointCoord";
    case BuiltIn::FrontFacing:
        return "FrontFacing";
    case BuiltIn::SampleId:
        return "SampleId";
    case BuiltIn::SamplePosition:
        return "SamplePosition";
    case BuiltIn::SampleMask:
        return "SampleMask";
    case BuiltIn::FragDepth:
        return "FragDepth";
    case BuiltIn::HelperInvocation:
        return "HelperInvocation";
    case BuiltIn::NumWorkgroups:
        return "NumWorkgroups";
    case BuiltIn::WorkgroupSize:
        return "WorkgroupSize";
    case BuiltIn::WorkgroupId:
        return "WorkgroupId";
    case BuiltIn::LocalInvocationId:
        return "LocalInvocationId";
    case BuiltIn::GlobalInvocationId:
        return "GlobalInvocationId";
    case BuiltIn::LocalInvocationIndex:
        return "LocalInvocationIndex";
    case BuiltIn::WorkDim:
        return "WorkDim";
    case BuiltIn::GlobalSize:
        return "GlobalSize";
    case BuiltIn::EnqueuedWorkgroupSize:
        return "EnqueuedWorkgroupSize";
    case BuiltIn::GlobalOffset:
        return "GlobalOffset";
    case BuiltIn::GlobalLinearId:
        return "GlobalLinearId";
    case BuiltIn::SubgroupSize:
        return "SubgroupSize";
    case BuiltIn::SubgroupMaxSize:
        return "SubgroupMaxSize";
    case BuiltIn::NumSubgroups:
        return "NumSubgroups";
    case BuiltIn::NumEnqueuedSubgroups:
        return "NumEnqueuedSubgroups";
    case BuiltIn::SubgroupId:
        return "SubgroupId";
    case BuiltIn::SubgroupLocalInvocationId:
        return "SubgroupLocalInvocationId";
    case BuiltIn::VertexIndex:
        return "VertexIndex";
    case BuiltIn::InstanceIndex:
        return "InstanceIndex";
    case BuiltIn::CoreIDARM:
        return "CoreIDARM";
    case BuiltIn::CoreCountARM:
        return "CoreCountARM";
    case BuiltIn::CoreMaxIDARM:
        return "CoreMaxIDARM";
    case BuiltIn::WarpIDARM:
        return "WarpIDARM";
    case BuiltIn::WarpMaxIDARM:
        return "WarpMaxIDARM";
    case BuiltIn::SubgroupEqMask:
        return "SubgroupEqMask";
    case BuiltIn::SubgroupGeMask:
        return "SubgroupGeMask";
    case BuiltIn::SubgroupGtMask:
        return "SubgroupGtMask";
    case BuiltIn::SubgroupLeMask:
        return "SubgroupLeMask";
    case BuiltIn::SubgroupLtMask:
        return "SubgroupLtMask";
    case BuiltIn::BaseVertex:
        return "BaseVertex";
    case BuiltIn::BaseInstance:
        return "BaseInstance";
    case BuiltIn::DrawIndex:
        return "DrawIndex";
    case BuiltIn::PrimitiveShadingRateKHR:
        return "PrimitiveShadingRateKHR";
    case BuiltIn::DeviceIndex:
        return "DeviceIndex";
    case BuiltIn::ViewIndex:
        return "ViewIndex";
    case BuiltIn::ShadingRateKHR:
        return "ShadingRateKHR";
    case BuiltIn::BaryCoordNoPerspAMD:
        return "BaryCoordNoPerspAMD";
    case BuiltIn::BaryCoordNoPerspCentroidAMD:
        return "BaryCoordNoPerspCentroidAMD";
    case BuiltIn::BaryCoordNoPerspSampleAMD:
        return "BaryCoordNoPerspSampleAMD";
    case BuiltIn::BaryCoordSmoothAMD:
        return "BaryCoordSmoothAMD";
    case BuiltIn::BaryCoordSmoothCentroidAMD:
        return "BaryCoordSmoothCentroidAMD";
    case BuiltIn::BaryCoordSmoothSampleAMD:
        return "BaryCoordSmoothSampleAMD";
    case BuiltIn::BaryCoordPullModelAMD:
        return "BaryCoordPullModelAMD";
    case BuiltIn::FragStencilRefEXT:
        return "FragStencilRefEXT";
    case BuiltIn::RemainingRecursionLevelsAMDX:
        return "RemainingRecursionLevelsAMDX";
    case BuiltIn::ShaderIndexAMDX:
        return "ShaderIndexAMDX";
    case BuiltIn::ViewportMaskNV:
        return "ViewportMaskNV";
    case BuiltIn::SecondaryPositionNV:
        return "SecondaryPositionNV";
    case BuiltIn::SecondaryViewportMaskNV:
        return "SecondaryViewportMaskNV";
    case BuiltIn::PositionPerViewNV:
        return "PositionPerViewNV";
    case BuiltIn::ViewportMaskPerViewNV:
        return "ViewportMaskPerViewNV";
    case BuiltIn::FullyCoveredEXT:
        return "FullyCoveredEXT";
    case BuiltIn::TaskCountNV:
        return "TaskCountNV";
    case BuiltIn::PrimitiveCountNV:
        return "PrimitiveCountNV";
    case BuiltIn::PrimitiveIndicesNV:
        return "PrimitiveIndicesNV";
    case BuiltIn::ClipDistancePerViewNV:
        return "ClipDistancePerViewNV";
    case BuiltIn::CullDistancePerViewNV:
        return "CullDistancePerViewNV";
    case BuiltIn::LayerPerViewNV:
        return "LayerPerViewNV";
    case BuiltIn::MeshViewCountNV:
        return "MeshViewCountNV";
    case BuiltIn::MeshViewIndicesNV:
        return "MeshViewIndicesNV";
    case BuiltIn::BaryCoordKHR:
        return "BaryCoordKHR";
    case BuiltIn::BaryCoordNoPerspKHR:
        return "BaryCoordNoPerspKHR";
    case BuiltIn::FragSizeEXT:
        return "FragSizeEXT";
    case BuiltIn::FragInvocationCountEXT:
        return "FragInvocationCountEXT";
    case BuiltIn::PrimitivePointIndicesEXT:
        return "PrimitivePointIndicesEXT";
    case BuiltIn::PrimitiveLineIndicesEXT:
        return "PrimitiveLineIndicesEXT";
    case BuiltIn::PrimitiveTriangleIndicesEXT:
        return "PrimitiveTriangleIndicesEXT";
    case BuiltIn::CullPrimitiveEXT:
        return "CullPrimitiveEXT";
    case BuiltIn::LaunchIdKHR:
        return "LaunchIdKHR";
    case BuiltIn::LaunchSizeKHR:
        return "LaunchSizeKHR";
    case BuiltIn::WorldRayOriginKHR:
        return "WorldRayOriginKHR";
    case BuiltIn::WorldRayDirectionKHR:
        return "WorldRayDirectionKHR";
    case BuiltIn::ObjectRayOriginKHR:
        return "ObjectRayOriginKHR";
    case BuiltIn::ObjectRayDirectionKHR:
        return "ObjectRayDirectionKHR";
    case BuiltIn::RayTminKHR:
        return "RayTminKHR";
    case BuiltIn::RayTmaxKHR:
        return "RayTmaxKHR";
    case BuiltIn::InstanceCustomIndexKHR:
        return "InstanceCustomIndexKHR";
    case BuiltIn::ObjectToWorldKHR:
        return "ObjectToWorldKHR";
    case BuiltIn::WorldToObjectKHR:
        return "WorldToObjectKHR";
    case BuiltIn::HitTNV:
        return "HitTNV";
    case BuiltIn::HitKindKHR:
        return "HitKindKHR";
    case BuiltIn::CurrentRayTimeNV:
        return "CurrentRayTimeNV";
    case BuiltIn::HitTriangleVertexPositionsKHR:
        return "HitTriangleVertexPositionsKHR";
    case BuiltIn::HitMicroTriangleVertexPositionsNV:
        return "HitMicroTriangleVertexPositionsNV";
    case BuiltIn::HitMicroTriangleVertexBarycentricsNV:
        return "HitMicroTriangleVertexBarycentricsNV";
    case BuiltIn::IncomingRayFlagsKHR:
        return "IncomingRayFlagsKHR";
    case BuiltIn::RayGeometryIndexKHR:
        return "RayGeometryIndexKHR";
    case BuiltIn::WarpsPerSMNV:
        return "WarpsPerSMNV";
    case BuiltIn::SMCountNV:
        return "SMCountNV";
    case BuiltIn::WarpIDNV:
        return "WarpIDNV";
    case BuiltIn::SMIDNV:
        return "SMIDNV";
    case BuiltIn::HitKindFrontFacingMicroTriangleNV:
        return "HitKindFrontFacingMicroTriangleNV";
    case BuiltIn::HitKindBackFacingMicroTriangleNV:
        return "HitKindBackFacingMicroTriangleNV";
    case BuiltIn::CullMaskKHR:
        return "CullMaskKHR";
    }
    return "unknown";
}
auto to_string(Scope e) -> char const * {
    switch (e) {
    case Scope::CrossDevice:
        return "CrossDevice";
    case Scope::Device:
        return "Device";
    case Scope::Workgroup:
        return "Workgroup";
    case Scope::Subgroup:
        return "Subgroup";
    case Scope::Invocation:
        return "Invocation";
    case Scope::QueueFamily:
        return "QueueFamily";
    case Scope::ShaderCallKHR:
        return "ShaderCallKHR";
    }
    return "unknown";
}
auto to_string(GroupOperation e) -> char const * {
    switch (e) {
    case GroupOperation::Reduce:
        return "Reduce";
    case GroupOperation::InclusiveScan:
        return "InclusiveScan";
    case GroupOperation::ExclusiveScan:
        return "ExclusiveScan";
    case GroupOperation::ClusteredReduce:
        return "ClusteredReduce";
    case GroupOperation::PartitionedReduceNV:
        return "PartitionedReduceNV";
    case GroupOperation::PartitionedInclusiveScanNV:
        return "PartitionedInclusiveScanNV";
    case GroupOperation::PartitionedExclusiveScanNV:
        return "PartitionedExclusiveScanNV";
    }
    return "unknown";
}
auto to_string(KernelEnqueueFlags e) -> char const * {
    switch (e) {
    case KernelEnqueueFlags::NoWait:
        return "NoWait";
    case KernelEnqueueFlags::WaitKernel:
        return "WaitKernel";
    case KernelEnqueueFlags::WaitWorkGroup:
        return "WaitWorkGroup";
    }
    return "unknown";
}
auto to_string(Capability e) -> char const * {
    switch (e) {
    case Capability::Matrix:
        return "Matrix";
    case Capability::Shader:
        return "Shader";
    case Capability::Geometry:
        return "Geometry";
    case Capability::Tessellation:
        return "Tessellation";
    case Capability::Addresses:
        return "Addresses";
    case Capability::Linkage:
        return "Linkage";
    case Capability::Kernel:
        return "Kernel";
    case Capability::Vector16:
        return "Vector16";
    case Capability::Float16Buffer:
        return "Float16Buffer";
    case Capability::Float16:
        return "Float16";
    case Capability::Float64:
        return "Float64";
    case Capability::Int64:
        return "Int64";
    case Capability::Int64Atomics:
        return "Int64Atomics";
    case Capability::ImageBasic:
        return "ImageBasic";
    case Capability::ImageReadWrite:
        return "ImageReadWrite";
    case Capability::ImageMipmap:
        return "ImageMipmap";
    case Capability::Pipes:
        return "Pipes";
    case Capability::Groups:
        return "Groups";
    case Capability::DeviceEnqueue:
        return "DeviceEnqueue";
    case Capability::LiteralSampler:
        return "LiteralSampler";
    case Capability::AtomicStorage:
        return "AtomicStorage";
    case Capability::Int16:
        return "Int16";
    case Capability::TessellationPointSize:
        return "TessellationPointSize";
    case Capability::GeometryPointSize:
        return "GeometryPointSize";
    case Capability::ImageGatherExtended:
        return "ImageGatherExtended";
    case Capability::StorageImageMultisample:
        return "StorageImageMultisample";
    case Capability::UniformBufferArrayDynamicIndexing:
        return "UniformBufferArrayDynamicIndexing";
    case Capability::SampledImageArrayDynamicIndexing:
        return "SampledImageArrayDynamicIndexing";
    case Capability::StorageBufferArrayDynamicIndexing:
        return "StorageBufferArrayDynamicIndexing";
    case Capability::StorageImageArrayDynamicIndexing:
        return "StorageImageArrayDynamicIndexing";
    case Capability::ClipDistance:
        return "ClipDistance";
    case Capability::CullDistance:
        return "CullDistance";
    case Capability::ImageCubeArray:
        return "ImageCubeArray";
    case Capability::SampleRateShading:
        return "SampleRateShading";
    case Capability::ImageRect:
        return "ImageRect";
    case Capability::SampledRect:
        return "SampledRect";
    case Capability::GenericPointer:
        return "GenericPointer";
    case Capability::Int8:
        return "Int8";
    case Capability::InputAttachment:
        return "InputAttachment";
    case Capability::SparseResidency:
        return "SparseResidency";
    case Capability::MinLod:
        return "MinLod";
    case Capability::Sampled1D:
        return "Sampled1D";
    case Capability::Image1D:
        return "Image1D";
    case Capability::SampledCubeArray:
        return "SampledCubeArray";
    case Capability::SampledBuffer:
        return "SampledBuffer";
    case Capability::ImageBuffer:
        return "ImageBuffer";
    case Capability::ImageMSArray:
        return "ImageMSArray";
    case Capability::StorageImageExtendedFormats:
        return "StorageImageExtendedFormats";
    case Capability::ImageQuery:
        return "ImageQuery";
    case Capability::DerivativeControl:
        return "DerivativeControl";
    case Capability::InterpolationFunction:
        return "InterpolationFunction";
    case Capability::TransformFeedback:
        return "TransformFeedback";
    case Capability::GeometryStreams:
        return "GeometryStreams";
    case Capability::StorageImageReadWithoutFormat:
        return "StorageImageReadWithoutFormat";
    case Capability::StorageImageWriteWithoutFormat:
        return "StorageImageWriteWithoutFormat";
    case Capability::MultiViewport:
        return "MultiViewport";
    case Capability::SubgroupDispatch:
        return "SubgroupDispatch";
    case Capability::NamedBarrier:
        return "NamedBarrier";
    case Capability::PipeStorage:
        return "PipeStorage";
    case Capability::GroupNonUniform:
        return "GroupNonUniform";
    case Capability::GroupNonUniformVote:
        return "GroupNonUniformVote";
    case Capability::GroupNonUniformArithmetic:
        return "GroupNonUniformArithmetic";
    case Capability::GroupNonUniformBallot:
        return "GroupNonUniformBallot";
    case Capability::GroupNonUniformShuffle:
        return "GroupNonUniformShuffle";
    case Capability::GroupNonUniformShuffleRelative:
        return "GroupNonUniformShuffleRelative";
    case Capability::GroupNonUniformClustered:
        return "GroupNonUniformClustered";
    case Capability::GroupNonUniformQuad:
        return "GroupNonUniformQuad";
    case Capability::ShaderLayer:
        return "ShaderLayer";
    case Capability::ShaderViewportIndex:
        return "ShaderViewportIndex";
    case Capability::UniformDecoration:
        return "UniformDecoration";
    case Capability::CoreBuiltinsARM:
        return "CoreBuiltinsARM";
    case Capability::TileImageColorReadAccessEXT:
        return "TileImageColorReadAccessEXT";
    case Capability::TileImageDepthReadAccessEXT:
        return "TileImageDepthReadAccessEXT";
    case Capability::TileImageStencilReadAccessEXT:
        return "TileImageStencilReadAccessEXT";
    case Capability::CooperativeMatrixLayoutsARM:
        return "CooperativeMatrixLayoutsARM";
    case Capability::FragmentShadingRateKHR:
        return "FragmentShadingRateKHR";
    case Capability::SubgroupBallotKHR:
        return "SubgroupBallotKHR";
    case Capability::DrawParameters:
        return "DrawParameters";
    case Capability::WorkgroupMemoryExplicitLayoutKHR:
        return "WorkgroupMemoryExplicitLayoutKHR";
    case Capability::WorkgroupMemoryExplicitLayout8BitAccessKHR:
        return "WorkgroupMemoryExplicitLayout8BitAccessKHR";
    case Capability::WorkgroupMemoryExplicitLayout16BitAccessKHR:
        return "WorkgroupMemoryExplicitLayout16BitAccessKHR";
    case Capability::SubgroupVoteKHR:
        return "SubgroupVoteKHR";
    case Capability::StorageBuffer16BitAccess:
        return "StorageBuffer16BitAccess";
    case Capability::UniformAndStorageBuffer16BitAccess:
        return "UniformAndStorageBuffer16BitAccess";
    case Capability::StoragePushConstant16:
        return "StoragePushConstant16";
    case Capability::StorageInputOutput16:
        return "StorageInputOutput16";
    case Capability::DeviceGroup:
        return "DeviceGroup";
    case Capability::MultiView:
        return "MultiView";
    case Capability::VariablePointersStorageBuffer:
        return "VariablePointersStorageBuffer";
    case Capability::VariablePointers:
        return "VariablePointers";
    case Capability::AtomicStorageOps:
        return "AtomicStorageOps";
    case Capability::SampleMaskPostDepthCoverage:
        return "SampleMaskPostDepthCoverage";
    case Capability::StorageBuffer8BitAccess:
        return "StorageBuffer8BitAccess";
    case Capability::UniformAndStorageBuffer8BitAccess:
        return "UniformAndStorageBuffer8BitAccess";
    case Capability::StoragePushConstant8:
        return "StoragePushConstant8";
    case Capability::DenormPreserve:
        return "DenormPreserve";
    case Capability::DenormFlushToZero:
        return "DenormFlushToZero";
    case Capability::SignedZeroInfNanPreserve:
        return "SignedZeroInfNanPreserve";
    case Capability::RoundingModeRTE:
        return "RoundingModeRTE";
    case Capability::RoundingModeRTZ:
        return "RoundingModeRTZ";
    case Capability::RayQueryProvisionalKHR:
        return "RayQueryProvisionalKHR";
    case Capability::RayQueryKHR:
        return "RayQueryKHR";
    case Capability::UntypedPointersKHR:
        return "UntypedPointersKHR";
    case Capability::RayTraversalPrimitiveCullingKHR:
        return "RayTraversalPrimitiveCullingKHR";
    case Capability::RayTracingKHR:
        return "RayTracingKHR";
    case Capability::TextureSampleWeightedQCOM:
        return "TextureSampleWeightedQCOM";
    case Capability::TextureBoxFilterQCOM:
        return "TextureBoxFilterQCOM";
    case Capability::TextureBlockMatchQCOM:
        return "TextureBlockMatchQCOM";
    case Capability::TextureBlockMatch2QCOM:
        return "TextureBlockMatch2QCOM";
    case Capability::Float16ImageAMD:
        return "Float16ImageAMD";
    case Capability::ImageGatherBiasLodAMD:
        return "ImageGatherBiasLodAMD";
    case Capability::FragmentMaskAMD:
        return "FragmentMaskAMD";
    case Capability::StencilExportEXT:
        return "StencilExportEXT";
    case Capability::ImageReadWriteLodAMD:
        return "ImageReadWriteLodAMD";
    case Capability::Int64ImageEXT:
        return "Int64ImageEXT";
    case Capability::ShaderClockKHR:
        return "ShaderClockKHR";
    case Capability::ShaderEnqueueAMDX:
        return "ShaderEnqueueAMDX";
    case Capability::QuadControlKHR:
        return "QuadControlKHR";
    case Capability::SampleMaskOverrideCoverageNV:
        return "SampleMaskOverrideCoverageNV";
    case Capability::GeometryShaderPassthroughNV:
        return "GeometryShaderPassthroughNV";
    case Capability::ShaderViewportIndexLayerEXT:
        return "ShaderViewportIndexLayerEXT";
    case Capability::ShaderViewportMaskNV:
        return "ShaderViewportMaskNV";
    case Capability::ShaderStereoViewNV:
        return "ShaderStereoViewNV";
    case Capability::PerViewAttributesNV:
        return "PerViewAttributesNV";
    case Capability::FragmentFullyCoveredEXT:
        return "FragmentFullyCoveredEXT";
    case Capability::MeshShadingNV:
        return "MeshShadingNV";
    case Capability::ImageFootprintNV:
        return "ImageFootprintNV";
    case Capability::MeshShadingEXT:
        return "MeshShadingEXT";
    case Capability::FragmentBarycentricKHR:
        return "FragmentBarycentricKHR";
    case Capability::ComputeDerivativeGroupQuadsKHR:
        return "ComputeDerivativeGroupQuadsKHR";
    case Capability::FragmentDensityEXT:
        return "FragmentDensityEXT";
    case Capability::GroupNonUniformPartitionedNV:
        return "GroupNonUniformPartitionedNV";
    case Capability::ShaderNonUniform:
        return "ShaderNonUniform";
    case Capability::RuntimeDescriptorArray:
        return "RuntimeDescriptorArray";
    case Capability::InputAttachmentArrayDynamicIndexing:
        return "InputAttachmentArrayDynamicIndexing";
    case Capability::UniformTexelBufferArrayDynamicIndexing:
        return "UniformTexelBufferArrayDynamicIndexing";
    case Capability::StorageTexelBufferArrayDynamicIndexing:
        return "StorageTexelBufferArrayDynamicIndexing";
    case Capability::UniformBufferArrayNonUniformIndexing:
        return "UniformBufferArrayNonUniformIndexing";
    case Capability::SampledImageArrayNonUniformIndexing:
        return "SampledImageArrayNonUniformIndexing";
    case Capability::StorageBufferArrayNonUniformIndexing:
        return "StorageBufferArrayNonUniformIndexing";
    case Capability::StorageImageArrayNonUniformIndexing:
        return "StorageImageArrayNonUniformIndexing";
    case Capability::InputAttachmentArrayNonUniformIndexing:
        return "InputAttachmentArrayNonUniformIndexing";
    case Capability::UniformTexelBufferArrayNonUniformIndexing:
        return "UniformTexelBufferArrayNonUniformIndexing";
    case Capability::StorageTexelBufferArrayNonUniformIndexing:
        return "StorageTexelBufferArrayNonUniformIndexing";
    case Capability::RayTracingPositionFetchKHR:
        return "RayTracingPositionFetchKHR";
    case Capability::RayTracingNV:
        return "RayTracingNV";
    case Capability::RayTracingMotionBlurNV:
        return "RayTracingMotionBlurNV";
    case Capability::VulkanMemoryModel:
        return "VulkanMemoryModel";
    case Capability::VulkanMemoryModelDeviceScope:
        return "VulkanMemoryModelDeviceScope";
    case Capability::PhysicalStorageBufferAddresses:
        return "PhysicalStorageBufferAddresses";
    case Capability::ComputeDerivativeGroupLinearKHR:
        return "ComputeDerivativeGroupLinearKHR";
    case Capability::RayTracingProvisionalKHR:
        return "RayTracingProvisionalKHR";
    case Capability::CooperativeMatrixNV:
        return "CooperativeMatrixNV";
    case Capability::FragmentShaderSampleInterlockEXT:
        return "FragmentShaderSampleInterlockEXT";
    case Capability::FragmentShaderShadingRateInterlockEXT:
        return "FragmentShaderShadingRateInterlockEXT";
    case Capability::ShaderSMBuiltinsNV:
        return "ShaderSMBuiltinsNV";
    case Capability::FragmentShaderPixelInterlockEXT:
        return "FragmentShaderPixelInterlockEXT";
    case Capability::DemoteToHelperInvocation:
        return "DemoteToHelperInvocation";
    case Capability::DisplacementMicromapNV:
        return "DisplacementMicromapNV";
    case Capability::RayTracingOpacityMicromapEXT:
        return "RayTracingOpacityMicromapEXT";
    case Capability::ShaderInvocationReorderNV:
        return "ShaderInvocationReorderNV";
    case Capability::BindlessTextureNV:
        return "BindlessTextureNV";
    case Capability::RayQueryPositionFetchKHR:
        return "RayQueryPositionFetchKHR";
    case Capability::AtomicFloat16VectorNV:
        return "AtomicFloat16VectorNV";
    case Capability::RayTracingDisplacementMicromapNV:
        return "RayTracingDisplacementMicromapNV";
    case Capability::RawAccessChainsNV:
        return "RawAccessChainsNV";
    case Capability::CooperativeMatrixReductionsNV:
        return "CooperativeMatrixReductionsNV";
    case Capability::CooperativeMatrixConversionsNV:
        return "CooperativeMatrixConversionsNV";
    case Capability::CooperativeMatrixPerElementOperationsNV:
        return "CooperativeMatrixPerElementOperationsNV";
    case Capability::CooperativeMatrixTensorAddressingNV:
        return "CooperativeMatrixTensorAddressingNV";
    case Capability::CooperativeMatrixBlockLoadsNV:
        return "CooperativeMatrixBlockLoadsNV";
    case Capability::TensorAddressingNV:
        return "TensorAddressingNV";
    case Capability::SubgroupShuffleINTEL:
        return "SubgroupShuffleINTEL";
    case Capability::SubgroupBufferBlockIOINTEL:
        return "SubgroupBufferBlockIOINTEL";
    case Capability::SubgroupImageBlockIOINTEL:
        return "SubgroupImageBlockIOINTEL";
    case Capability::SubgroupImageMediaBlockIOINTEL:
        return "SubgroupImageMediaBlockIOINTEL";
    case Capability::RoundToInfinityINTEL:
        return "RoundToInfinityINTEL";
    case Capability::FloatingPointModeINTEL:
        return "FloatingPointModeINTEL";
    case Capability::IntegerFunctions2INTEL:
        return "IntegerFunctions2INTEL";
    case Capability::FunctionPointersINTEL:
        return "FunctionPointersINTEL";
    case Capability::IndirectReferencesINTEL:
        return "IndirectReferencesINTEL";
    case Capability::AsmINTEL:
        return "AsmINTEL";
    case Capability::AtomicFloat32MinMaxEXT:
        return "AtomicFloat32MinMaxEXT";
    case Capability::AtomicFloat64MinMaxEXT:
        return "AtomicFloat64MinMaxEXT";
    case Capability::AtomicFloat16MinMaxEXT:
        return "AtomicFloat16MinMaxEXT";
    case Capability::VectorComputeINTEL:
        return "VectorComputeINTEL";
    case Capability::VectorAnyINTEL:
        return "VectorAnyINTEL";
    case Capability::ExpectAssumeKHR:
        return "ExpectAssumeKHR";
    case Capability::SubgroupAvcMotionEstimationINTEL:
        return "SubgroupAvcMotionEstimationINTEL";
    case Capability::SubgroupAvcMotionEstimationIntraINTEL:
        return "SubgroupAvcMotionEstimationIntraINTEL";
    case Capability::SubgroupAvcMotionEstimationChromaINTEL:
        return "SubgroupAvcMotionEstimationChromaINTEL";
    case Capability::VariableLengthArrayINTEL:
        return "VariableLengthArrayINTEL";
    case Capability::FunctionFloatControlINTEL:
        return "FunctionFloatControlINTEL";
    case Capability::FPGAMemoryAttributesINTEL:
        return "FPGAMemoryAttributesINTEL";
    case Capability::FPFastMathModeINTEL:
        return "FPFastMathModeINTEL";
    case Capability::ArbitraryPrecisionIntegersINTEL:
        return "ArbitraryPrecisionIntegersINTEL";
    case Capability::ArbitraryPrecisionFloatingPointINTEL:
        return "ArbitraryPrecisionFloatingPointINTEL";
    case Capability::UnstructuredLoopControlsINTEL:
        return "UnstructuredLoopControlsINTEL";
    case Capability::FPGALoopControlsINTEL:
        return "FPGALoopControlsINTEL";
    case Capability::KernelAttributesINTEL:
        return "KernelAttributesINTEL";
    case Capability::FPGAKernelAttributesINTEL:
        return "FPGAKernelAttributesINTEL";
    case Capability::FPGAMemoryAccessesINTEL:
        return "FPGAMemoryAccessesINTEL";
    case Capability::FPGAClusterAttributesINTEL:
        return "FPGAClusterAttributesINTEL";
    case Capability::LoopFuseINTEL:
        return "LoopFuseINTEL";
    case Capability::FPGADSPControlINTEL:
        return "FPGADSPControlINTEL";
    case Capability::MemoryAccessAliasingINTEL:
        return "MemoryAccessAliasingINTEL";
    case Capability::FPGAInvocationPipeliningAttributesINTEL:
        return "FPGAInvocationPipeliningAttributesINTEL";
    case Capability::FPGABufferLocationINTEL:
        return "FPGABufferLocationINTEL";
    case Capability::ArbitraryPrecisionFixedPointINTEL:
        return "ArbitraryPrecisionFixedPointINTEL";
    case Capability::USMStorageClassesINTEL:
        return "USMStorageClassesINTEL";
    case Capability::RuntimeAlignedAttributeINTEL:
        return "RuntimeAlignedAttributeINTEL";
    case Capability::IOPipesINTEL:
        return "IOPipesINTEL";
    case Capability::BlockingPipesINTEL:
        return "BlockingPipesINTEL";
    case Capability::FPGARegINTEL:
        return "FPGARegINTEL";
    case Capability::DotProductInputAll:
        return "DotProductInputAll";
    case Capability::DotProductInput4x8Bit:
        return "DotProductInput4x8Bit";
    case Capability::DotProductInput4x8BitPacked:
        return "DotProductInput4x8BitPacked";
    case Capability::DotProduct:
        return "DotProduct";
    case Capability::RayCullMaskKHR:
        return "RayCullMaskKHR";
    case Capability::CooperativeMatrixKHR:
        return "CooperativeMatrixKHR";
    case Capability::ReplicatedCompositesEXT:
        return "ReplicatedCompositesEXT";
    case Capability::BitInstructions:
        return "BitInstructions";
    case Capability::GroupNonUniformRotateKHR:
        return "GroupNonUniformRotateKHR";
    case Capability::FloatControls2:
        return "FloatControls2";
    case Capability::AtomicFloat32AddEXT:
        return "AtomicFloat32AddEXT";
    case Capability::AtomicFloat64AddEXT:
        return "AtomicFloat64AddEXT";
    case Capability::LongCompositesINTEL:
        return "LongCompositesINTEL";
    case Capability::OptNoneEXT:
        return "OptNoneEXT";
    case Capability::AtomicFloat16AddEXT:
        return "AtomicFloat16AddEXT";
    case Capability::DebugInfoModuleINTEL:
        return "DebugInfoModuleINTEL";
    case Capability::BFloat16ConversionINTEL:
        return "BFloat16ConversionINTEL";
    case Capability::SplitBarrierINTEL:
        return "SplitBarrierINTEL";
    case Capability::ArithmeticFenceEXT:
        return "ArithmeticFenceEXT";
    case Capability::FPGAClusterAttributesV2INTEL:
        return "FPGAClusterAttributesV2INTEL";
    case Capability::FPGAKernelAttributesv2INTEL:
        return "FPGAKernelAttributesv2INTEL";
    case Capability::FPMaxErrorINTEL:
        return "FPMaxErrorINTEL";
    case Capability::FPGALatencyControlINTEL:
        return "FPGALatencyControlINTEL";
    case Capability::FPGAArgumentInterfacesINTEL:
        return "FPGAArgumentInterfacesINTEL";
    case Capability::GlobalVariableHostAccessINTEL:
        return "GlobalVariableHostAccessINTEL";
    case Capability::GlobalVariableFPGADecorationsINTEL:
        return "GlobalVariableFPGADecorationsINTEL";
    case Capability::SubgroupBufferPrefetchINTEL:
        return "SubgroupBufferPrefetchINTEL";
    case Capability::GroupUniformArithmeticKHR:
        return "GroupUniformArithmeticKHR";
    case Capability::MaskedGatherScatterINTEL:
        return "MaskedGatherScatterINTEL";
    case Capability::CacheControlsINTEL:
        return "CacheControlsINTEL";
    case Capability::RegisterLimitsINTEL:
        return "RegisterLimitsINTEL";
    }
    return "unknown";
}
auto to_string(RayQueryIntersection e) -> char const * {
    switch (e) {
    case RayQueryIntersection::RayQueryCandidateIntersectionKHR:
        return "RayQueryCandidateIntersectionKHR";
    case RayQueryIntersection::RayQueryCommittedIntersectionKHR:
        return "RayQueryCommittedIntersectionKHR";
    }
    return "unknown";
}
auto to_string(RayQueryCommittedIntersectionType e) -> char const * {
    switch (e) {
    case RayQueryCommittedIntersectionType::RayQueryCommittedIntersectionNoneKHR:
        return "RayQueryCommittedIntersectionNoneKHR";
    case RayQueryCommittedIntersectionType::RayQueryCommittedIntersectionTriangleKHR:
        return "RayQueryCommittedIntersectionTriangleKHR";
    case RayQueryCommittedIntersectionType::RayQueryCommittedIntersectionGeneratedKHR:
        return "RayQueryCommittedIntersectionGeneratedKHR";
    }
    return "unknown";
}
auto to_string(RayQueryCandidateIntersectionType e) -> char const * {
    switch (e) {
    case RayQueryCandidateIntersectionType::RayQueryCandidateIntersectionTriangleKHR:
        return "RayQueryCandidateIntersectionTriangleKHR";
    case RayQueryCandidateIntersectionType::RayQueryCandidateIntersectionAABBKHR:
        return "RayQueryCandidateIntersectionAABBKHR";
    }
    return "unknown";
}
auto to_string(PackedVectorFormat e) -> char const * {
    switch (e) {
    case PackedVectorFormat::PackedVectorFormat4x8Bit:
        return "PackedVectorFormat4x8Bit";
    }
    return "unknown";
}
auto to_string(CooperativeMatrixOperands e) -> char const * {
    switch (e) {
    case CooperativeMatrixOperands::NoneKHR:
        return "NoneKHR";
    case CooperativeMatrixOperands::MatrixASignedComponentsKHR:
        return "MatrixASignedComponentsKHR";
    case CooperativeMatrixOperands::MatrixBSignedComponentsKHR:
        return "MatrixBSignedComponentsKHR";
    case CooperativeMatrixOperands::MatrixCSignedComponentsKHR:
        return "MatrixCSignedComponentsKHR";
    case CooperativeMatrixOperands::MatrixResultSignedComponentsKHR:
        return "MatrixResultSignedComponentsKHR";
    case CooperativeMatrixOperands::SaturatingAccumulationKHR:
        return "SaturatingAccumulationKHR";
    }
    return "unknown";
}
auto to_string(CooperativeMatrixLayout e) -> char const * {
    switch (e) {
    case CooperativeMatrixLayout::RowMajorKHR:
        return "RowMajorKHR";
    case CooperativeMatrixLayout::ColumnMajorKHR:
        return "ColumnMajorKHR";
    case CooperativeMatrixLayout::RowBlockedInterleavedARM:
        return "RowBlockedInterleavedARM";
    case CooperativeMatrixLayout::ColumnBlockedInterleavedARM:
        return "ColumnBlockedInterleavedARM";
    }
    return "unknown";
}
auto to_string(CooperativeMatrixUse e) -> char const * {
    switch (e) {
    case CooperativeMatrixUse::MatrixAKHR:
        return "MatrixAKHR";
    case CooperativeMatrixUse::MatrixBKHR:
        return "MatrixBKHR";
    case CooperativeMatrixUse::MatrixAccumulatorKHR:
        return "MatrixAccumulatorKHR";
    }
    return "unknown";
}
auto to_string(CooperativeMatrixReduce e) -> char const * {
    switch (e) {
    case CooperativeMatrixReduce::Row:
        return "Row";
    case CooperativeMatrixReduce::Column:
        return "Column";
    case CooperativeMatrixReduce::CooperativeMatrixReduce2x2:
        return "CooperativeMatrixReduce2x2";
    }
    return "unknown";
}
auto to_string(TensorClampMode e) -> char const * {
    switch (e) {
    case TensorClampMode::Undefined:
        return "Undefined";
    case TensorClampMode::Constant:
        return "Constant";
    case TensorClampMode::ClampToEdge:
        return "ClampToEdge";
    case TensorClampMode::Repeat:
        return "Repeat";
    case TensorClampMode::RepeatMirrored:
        return "RepeatMirrored";
    }
    return "unknown";
}
auto to_string(TensorAddressingOperands e) -> char const * {
    switch (e) {
    case TensorAddressingOperands::None:
        return "None";
    case TensorAddressingOperands::TensorView:
        return "TensorView";
    case TensorAddressingOperands::DecodeFunc:
        return "DecodeFunc";
    }
    return "unknown";
}
auto to_string(InitializationModeQualifier e) -> char const * {
    switch (e) {
    case InitializationModeQualifier::InitOnDeviceReprogramINTEL:
        return "InitOnDeviceReprogramINTEL";
    case InitializationModeQualifier::InitOnDeviceResetINTEL:
        return "InitOnDeviceResetINTEL";
    }
    return "unknown";
}
auto to_string(LoadCacheControl e) -> char const * {
    switch (e) {
    case LoadCacheControl::UncachedINTEL:
        return "UncachedINTEL";
    case LoadCacheControl::CachedINTEL:
        return "CachedINTEL";
    case LoadCacheControl::StreamingINTEL:
        return "StreamingINTEL";
    case LoadCacheControl::InvalidateAfterReadINTEL:
        return "InvalidateAfterReadINTEL";
    case LoadCacheControl::ConstCachedINTEL:
        return "ConstCachedINTEL";
    }
    return "unknown";
}
auto to_string(StoreCacheControl e) -> char const * {
    switch (e) {
    case StoreCacheControl::UncachedINTEL:
        return "UncachedINTEL";
    case StoreCacheControl::WriteThroughINTEL:
        return "WriteThroughINTEL";
    case StoreCacheControl::WriteBackINTEL:
        return "WriteBackINTEL";
    case StoreCacheControl::StreamingINTEL:
        return "StreamingINTEL";
    }
    return "unknown";
}
auto to_string(NamedMaximumNumberOfRegisters e) -> char const * {
    switch (e) {
    case NamedMaximumNumberOfRegisters::AutoINTEL:
        return "AutoINTEL";
    }
    return "unknown";
}
auto to_string(FPEncoding e) -> char const * {
    switch (e) {}
    return "unknown";
}

} // namespace tinytc::spv
