// Copyright (C) 2025 Intel Corporation
// SPDX-License-Identifier: BSD-3-Clause

// This file is generated
// Do not edit manually

#include "opencl.std.hpp"

namespace tinytc::spv {

auto to_string(OpenCLstd ep) -> char const * {
    switch (ep) {
    case OpenCLstd::acos:
        return "acos";
    case OpenCLstd::acosh:
        return "acosh";
    case OpenCLstd::acospi:
        return "acospi";
    case OpenCLstd::asin:
        return "asin";
    case OpenCLstd::asinh:
        return "asinh";
    case OpenCLstd::asinpi:
        return "asinpi";
    case OpenCLstd::atan:
        return "atan";
    case OpenCLstd::atan2:
        return "atan2";
    case OpenCLstd::atanh:
        return "atanh";
    case OpenCLstd::atanpi:
        return "atanpi";
    case OpenCLstd::atan2pi:
        return "atan2pi";
    case OpenCLstd::cbrt:
        return "cbrt";
    case OpenCLstd::ceil:
        return "ceil";
    case OpenCLstd::copysign:
        return "copysign";
    case OpenCLstd::cos:
        return "cos";
    case OpenCLstd::cosh:
        return "cosh";
    case OpenCLstd::cospi:
        return "cospi";
    case OpenCLstd::erfc:
        return "erfc";
    case OpenCLstd::erf:
        return "erf";
    case OpenCLstd::exp:
        return "exp";
    case OpenCLstd::exp2:
        return "exp2";
    case OpenCLstd::exp10:
        return "exp10";
    case OpenCLstd::expm1:
        return "expm1";
    case OpenCLstd::fabs:
        return "fabs";
    case OpenCLstd::fdim:
        return "fdim";
    case OpenCLstd::floor:
        return "floor";
    case OpenCLstd::fma:
        return "fma";
    case OpenCLstd::fmax:
        return "fmax";
    case OpenCLstd::fmin:
        return "fmin";
    case OpenCLstd::fmod:
        return "fmod";
    case OpenCLstd::fract:
        return "fract";
    case OpenCLstd::frexp:
        return "frexp";
    case OpenCLstd::hypot:
        return "hypot";
    case OpenCLstd::ilogb:
        return "ilogb";
    case OpenCLstd::ldexp:
        return "ldexp";
    case OpenCLstd::lgamma:
        return "lgamma";
    case OpenCLstd::lgamma_r:
        return "lgamma_r";
    case OpenCLstd::log:
        return "log";
    case OpenCLstd::log2:
        return "log2";
    case OpenCLstd::log10:
        return "log10";
    case OpenCLstd::log1p:
        return "log1p";
    case OpenCLstd::logb:
        return "logb";
    case OpenCLstd::mad:
        return "mad";
    case OpenCLstd::maxmag:
        return "maxmag";
    case OpenCLstd::minmag:
        return "minmag";
    case OpenCLstd::modf:
        return "modf";
    case OpenCLstd::nan:
        return "nan";
    case OpenCLstd::nextafter:
        return "nextafter";
    case OpenCLstd::pow:
        return "pow";
    case OpenCLstd::pown:
        return "pown";
    case OpenCLstd::powr:
        return "powr";
    case OpenCLstd::remainder:
        return "remainder";
    case OpenCLstd::remquo:
        return "remquo";
    case OpenCLstd::rint:
        return "rint";
    case OpenCLstd::rootn:
        return "rootn";
    case OpenCLstd::round:
        return "round";
    case OpenCLstd::rsqrt:
        return "rsqrt";
    case OpenCLstd::sin:
        return "sin";
    case OpenCLstd::sincos:
        return "sincos";
    case OpenCLstd::sinh:
        return "sinh";
    case OpenCLstd::sinpi:
        return "sinpi";
    case OpenCLstd::sqrt:
        return "sqrt";
    case OpenCLstd::tan:
        return "tan";
    case OpenCLstd::tanh:
        return "tanh";
    case OpenCLstd::tanpi:
        return "tanpi";
    case OpenCLstd::tgamma:
        return "tgamma";
    case OpenCLstd::trunc:
        return "trunc";
    case OpenCLstd::half_cos:
        return "half_cos";
    case OpenCLstd::half_divide:
        return "half_divide";
    case OpenCLstd::half_exp:
        return "half_exp";
    case OpenCLstd::half_exp2:
        return "half_exp2";
    case OpenCLstd::half_exp10:
        return "half_exp10";
    case OpenCLstd::half_log:
        return "half_log";
    case OpenCLstd::half_log2:
        return "half_log2";
    case OpenCLstd::half_log10:
        return "half_log10";
    case OpenCLstd::half_powr:
        return "half_powr";
    case OpenCLstd::half_recip:
        return "half_recip";
    case OpenCLstd::half_rsqrt:
        return "half_rsqrt";
    case OpenCLstd::half_sin:
        return "half_sin";
    case OpenCLstd::half_sqrt:
        return "half_sqrt";
    case OpenCLstd::half_tan:
        return "half_tan";
    case OpenCLstd::native_cos:
        return "native_cos";
    case OpenCLstd::native_divide:
        return "native_divide";
    case OpenCLstd::native_exp:
        return "native_exp";
    case OpenCLstd::native_exp2:
        return "native_exp2";
    case OpenCLstd::native_exp10:
        return "native_exp10";
    case OpenCLstd::native_log:
        return "native_log";
    case OpenCLstd::native_log2:
        return "native_log2";
    case OpenCLstd::native_log10:
        return "native_log10";
    case OpenCLstd::native_powr:
        return "native_powr";
    case OpenCLstd::native_recip:
        return "native_recip";
    case OpenCLstd::native_rsqrt:
        return "native_rsqrt";
    case OpenCLstd::native_sin:
        return "native_sin";
    case OpenCLstd::native_sqrt:
        return "native_sqrt";
    case OpenCLstd::native_tan:
        return "native_tan";
    case OpenCLstd::s_abs:
        return "s_abs";
    case OpenCLstd::s_abs_diff:
        return "s_abs_diff";
    case OpenCLstd::s_add_sat:
        return "s_add_sat";
    case OpenCLstd::u_add_sat:
        return "u_add_sat";
    case OpenCLstd::s_hadd:
        return "s_hadd";
    case OpenCLstd::u_hadd:
        return "u_hadd";
    case OpenCLstd::s_rhadd:
        return "s_rhadd";
    case OpenCLstd::u_rhadd:
        return "u_rhadd";
    case OpenCLstd::s_clamp:
        return "s_clamp";
    case OpenCLstd::u_clamp:
        return "u_clamp";
    case OpenCLstd::clz:
        return "clz";
    case OpenCLstd::ctz:
        return "ctz";
    case OpenCLstd::s_mad_hi:
        return "s_mad_hi";
    case OpenCLstd::u_mad_sat:
        return "u_mad_sat";
    case OpenCLstd::s_mad_sat:
        return "s_mad_sat";
    case OpenCLstd::s_max:
        return "s_max";
    case OpenCLstd::u_max:
        return "u_max";
    case OpenCLstd::s_min:
        return "s_min";
    case OpenCLstd::u_min:
        return "u_min";
    case OpenCLstd::s_mul_hi:
        return "s_mul_hi";
    case OpenCLstd::rotate:
        return "rotate";
    case OpenCLstd::s_sub_sat:
        return "s_sub_sat";
    case OpenCLstd::u_sub_sat:
        return "u_sub_sat";
    case OpenCLstd::u_upsample:
        return "u_upsample";
    case OpenCLstd::s_upsample:
        return "s_upsample";
    case OpenCLstd::popcount:
        return "popcount";
    case OpenCLstd::s_mad24:
        return "s_mad24";
    case OpenCLstd::u_mad24:
        return "u_mad24";
    case OpenCLstd::s_mul24:
        return "s_mul24";
    case OpenCLstd::u_mul24:
        return "u_mul24";
    case OpenCLstd::u_abs:
        return "u_abs";
    case OpenCLstd::u_abs_diff:
        return "u_abs_diff";
    case OpenCLstd::u_mul_hi:
        return "u_mul_hi";
    case OpenCLstd::u_mad_hi:
        return "u_mad_hi";
    case OpenCLstd::fclamp:
        return "fclamp";
    case OpenCLstd::degrees:
        return "degrees";
    case OpenCLstd::fmax_common:
        return "fmax_common";
    case OpenCLstd::fmin_common:
        return "fmin_common";
    case OpenCLstd::mix:
        return "mix";
    case OpenCLstd::radians:
        return "radians";
    case OpenCLstd::step:
        return "step";
    case OpenCLstd::smoothstep:
        return "smoothstep";
    case OpenCLstd::sign:
        return "sign";
    case OpenCLstd::cross:
        return "cross";
    case OpenCLstd::distance:
        return "distance";
    case OpenCLstd::length:
        return "length";
    case OpenCLstd::normalize:
        return "normalize";
    case OpenCLstd::fast_distance:
        return "fast_distance";
    case OpenCLstd::fast_length:
        return "fast_length";
    case OpenCLstd::fast_normalize:
        return "fast_normalize";
    case OpenCLstd::bitselect:
        return "bitselect";
    case OpenCLstd::select:
        return "select";
    case OpenCLstd::vloadn:
        return "vloadn";
    case OpenCLstd::vstoren:
        return "vstoren";
    case OpenCLstd::vload_half:
        return "vload_half";
    case OpenCLstd::vload_halfn:
        return "vload_halfn";
    case OpenCLstd::vstore_half:
        return "vstore_half";
    case OpenCLstd::vstore_half_r:
        return "vstore_half_r";
    case OpenCLstd::vstore_halfn:
        return "vstore_halfn";
    case OpenCLstd::vstore_halfn_r:
        return "vstore_halfn_r";
    case OpenCLstd::vloada_halfn:
        return "vloada_halfn";
    case OpenCLstd::vstorea_halfn:
        return "vstorea_halfn";
    case OpenCLstd::vstorea_halfn_r:
        return "vstorea_halfn_r";
    case OpenCLstd::shuffle:
        return "shuffle";
    case OpenCLstd::shuffle2:
        return "shuffle2";
    case OpenCLstd::printf:
        return "printf";
    case OpenCLstd::prefetch:
        return "prefetch";
    }
    return "unknown";
}

} // namespace tinytc::spv
