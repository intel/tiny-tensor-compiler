// Copyright (C) 2024 Intel Corporation
// SPDX-License-Identifier: BSD-3-Clause

#ifndef TYPES_20240410_H
#define TYPES_20240410_H

#include "tinytc/export.h"

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

////////////////////////////
///////// Constants ////////
////////////////////////////

#define TINYTC_DYNAMIC INT64_MIN

////////////////////////////
/////// Enumerations ///////
////////////////////////////

// もち enum_h "tinytc/enums.anko"

//! Type for combination of address spaces
typedef uint32_t tinytc_address_spaces_t;

//! Type for combination of core feature flags
typedef uint32_t tinytc_core_feature_flags_t;

#define TINYTC_INTEL_GPU_ARCHITECTURE_SUB_VERSION_BITS 0xfff

////////////////////////////
/////////// Types //////////
////////////////////////////

//! @brief Bool type {0,1}
typedef uint8_t tinytc_bool_t;

//! @struct tinytc_attr
//! @brief Opaque struct for an attribute
struct tinytc_attr; // IWYU pragma: export
//! @brief data_type handle
typedef struct tinytc_attr *tinytc_attr_t;
//! @brief const data_type handle
typedef const struct tinytc_attr *const_tinytc_attr_t;

//! @struct tinytc_data_type
//! @brief Opaque struct for a data type
struct tinytc_data_type; // IWYU pragma: export
//! @brief data_type handle
typedef struct tinytc_data_type *tinytc_data_type_t;
//! @brief const data_type handle
typedef const struct tinytc_data_type *const_tinytc_data_type_t;

//! @struct tinytc_value
//! @brief Opaque struct for a value
struct tinytc_value; // IWYU pragma: export
//! @brief value handle
typedef struct tinytc_value *tinytc_value_t;
//! @brief const value handle
typedef const struct tinytc_value *const_tinytc_value_t;

//! @struct tinytc_inst
//! @brief Opaque struct for an instruction
struct tinytc_inst; // IWYU pragma: export
//! @brief inst handle
typedef struct tinytc_inst *tinytc_inst_t;
//! @brief const inst handle
typedef const struct tinytc_inst *const_tinytc_inst_t;
/**
 * @brief Delete inst object
 *
 * @param instr [inout] inst object
 */
TINYTC_EXPORT void tinytc_inst_destroy(tinytc_inst_t instr);

//! @brief inst iterator handle
typedef struct tinytc_inst *tinytc_inst_iterator_t;

//! @struct tinytc_region
//! @brief Opaque struct for a region
struct tinytc_region; // IWYU pragma: export
//! @brief region handle
typedef struct tinytc_region *tinytc_region_t;
//! @brief const region handle
typedef const struct tinytc_region *const_tinytc_region_t;

//! @struct tinytc_func
//! @brief Opaque struct for a function
struct tinytc_func; // IWYU pragma: export
//! @brief func handle
typedef struct tinytc_func *tinytc_func_t;
//! @brief const func handle
typedef const struct tinytc_func *const_tinytc_func_t;
/**
 * @brief Delete function object
 *
 * @param fun [inout] function object
 */
TINYTC_EXPORT void tinytc_func_destroy(tinytc_func_t fun);

//! @struct tinytc_prog
//! @brief Opaque struct for a program
struct tinytc_prog; // IWYU pragma: export
//! @brief prog handle
typedef struct tinytc_prog *tinytc_prog_t;
//! @brief const prog handle
typedef const struct tinytc_prog *const_tinytc_prog_t;
/**
 * @brief Release program object
 *
 * Decreases reference count by 1, free memory if reference count is 0.
 *
 * @param prg [inout] program object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_prog_release(tinytc_prog_t prg);
/**
 * @brief Increase reference count of program object by 1
 *
 * @param prg [inout] program object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_prog_retain(tinytc_prog_t prg);

//! @struct tinytc_spv_mod
//! @brief Opaque struct for a SPIR-V module
struct tinytc_spv_mod; // IWYU pragma: export
//! @brief spv_mod handle
typedef struct tinytc_spv_mod *tinytc_spv_mod_t;
//! @brief const spv_mod handle
typedef const struct tinytc_spv_mod *const_tinytc_spv_mod_t;
/**
 * @brief Release SPIR-V module
 *
 * Decreases reference count by 1, free memory if reference count is 0.
 *
 * @param mod [inout] SPIR-V module
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_spv_mod_release(tinytc_spv_mod_t mod);
/**
 * @brief Increase reference count of SPIR-V module by 1
 *
 * @param mod [inout] SPIR-V module
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_spv_mod_retain(tinytc_spv_mod_t mod);

//! @struct tinytc_core_info;
//! @brief Opaque struct for core information
struct tinytc_core_info; // IWYU pragma: export
//! @brief core_info handle
typedef struct tinytc_core_info *tinytc_core_info_t;
//! @brief const core_info handle
typedef const struct tinytc_core_info *const_tinytc_core_info_t;
/**
 * @brief Release core info object
 *
 * Decreases reference count by 1, free memory if reference count is 0.
 *
 * @param obj [inout] core info object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_core_info_release(tinytc_core_info_t obj);
/**
 * @brief Increase reference count of core info object by 1
 *
 * @param obj [inout] core info object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_core_info_retain(tinytc_core_info_t obj);

//! @struct tintyc_compiler_context
//! @brief Opaque struct for compiler context
struct tinytc_compiler_context; // IWYU pragma: export
//! @brief compiler_context handle
typedef struct tinytc_compiler_context *tinytc_compiler_context_t;
//! @brief const compiler_context handle
typedef const struct tinytc_compiler_context *const_tinytc_compiler_context_t;
/**
 * @brief Release context object
 *
 * Decreases reference count by 1, free memory if reference count is 0.
 *
 * @param obj [inout] context object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_compiler_context_release(tinytc_compiler_context_t obj);
/**
 * @brief Increase reference count of context object by 1
 *
 * @param obj [inout] context object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_compiler_context_retain(tinytc_compiler_context_t obj);

//! @struct tinytc_binary;
//! @brief Opaque struct for a binary
struct tinytc_binary; // IWYU pragma: export
//! @brief binary handle
typedef struct tinytc_binary *tinytc_binary_t;
//! @brief const binary handle
typedef const struct tinytc_binary *const_tinytc_binary_t;
/**
 * @brief Release binary object
 *
 * Decreases reference count by 1, free memory if reference count is 0.
 *
 * @param bin [inout] binary object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_binary_release(tinytc_binary_t bin);
/**
 * @brief Increase reference count of binary object by 1
 *
 * @param bin [inout] binary object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_binary_retain(tinytc_binary_t bin);

//! @struct tinytc_recipe;
//! @brief Opaque struct for a recipe
struct tinytc_recipe; // IWYU pragma: export
//! @brief recipe handle
typedef struct tinytc_recipe *tinytc_recipe_t;
//! @brief const recipe handle
typedef const struct tinytc_recipe *const_tinytc_recipe_t;
/**
 * @brief Release recipe object
 *
 * Decreases reference count by 1, free memory if reference count is 0.
 *
 * @param obj [inout] recipe object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_recipe_release(tinytc_recipe_t obj);
/**
 * @brief Increase reference count of recipe object by 1
 *
 * @param obj [inout] recipe object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_recipe_retain(tinytc_recipe_t obj);

//! @struct tinytc_recipe_handler;
//! @brief Opaque struct for a recipe handler
struct tinytc_recipe_handler; // IWYU pragma: export
//! @brief recipe_handler handle
typedef struct tinytc_recipe_handler *tinytc_recipe_handler_t;
//! @brief const recipe_handler handle
typedef const struct tinytc_recipe_handler *const_tinytc_recipe_handler_t;
/**
 * @brief Release recipe handler object
 *
 * Decreases reference count by 1, free memory if reference count is 0.
 *
 * @param obj [inout] recipe handler object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_recipe_handler_release(tinytc_recipe_handler_t obj);
/**
 * @brief Increase reference count of recipe handler object by 1
 *
 * @param obj [inout] recipe handler object
 *
 * @return tinytc_status_success on success and error otherwise
 */
TINYTC_EXPORT tinytc_status_t tinytc_recipe_handler_retain(tinytc_recipe_handler_t obj);

/**
 * @brief Delete a (non-const) string returned from tinytc API
 *
 * @param str [in] string
 */
TINYTC_EXPORT void tinytc_string_destroy(char *str);

////////////////////////////
////////// Structs /////////
////////////////////////////

//! @brief Named attribute
typedef struct tinytc_named_attr {
    tinytc_attr_t name; ///< Name stored as string attribute
    tinytc_attr_t attr; ///< Attribute
} tinytc_named_attr_t;

//! @brief Source code position
typedef struct tinytc_position {
    int32_t source_id; ///< Source file identifier; 0 is "unknown source"
    int32_t line;      ///< Line number; counting starts at 1
    int32_t column;    ///< Column number; counting start at 1
} tinytc_position_t;

//! @brief Source code location
typedef struct tinytc_location {
    tinytc_position_t begin; ///< Starting position
    tinytc_position_t end;   ///< End position
} tinytc_location_t;

////////////////////////////
///////// Callbacks ////////
////////////////////////////

/**
 * @brief Signature for error reporting callback
 *
 * @param what Error description
 * @param location Source code location
 * @param user_data user data that is passed on to callback
 */
typedef void (*tinytc_error_reporter_t)(char const *what, const tinytc_location_t *location,
                                        void *user_data);

#ifdef __cplusplus
}
#endif

#endif // TYPES_20240410_H
