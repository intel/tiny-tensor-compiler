; Copyright (C) 2025 Intel Corporation
; SPDX-License-Identifier: BSD-3-Clause

include "tinytc/enums.anko"

type @boolean "Bool type" {
}

type @number "Number type" {
    prop %ty => @scalar_type
}

type @coopmatrix "Coopmatrix type" {
    prop %component_ty => type_t "component type"
    prop %rows => i64            "number of rows"
    prop %cols => i64            "number of columns"
    prop %use => @matrix_use     "matrix use"
    cxx "inline auto shape(int mode) const -> std::int64_t { return mode == 1 ? cols() : rows(); }"
}

type @group "Group type" {
    prop %ty => type_t  "element type"
    prop %size => i64   "group size"
    prop %offset => i64 "offset added on element access"
}

type @memref "Memref type" {
    prop %element_ty => type_t        "element type"
    prop* %shape => i64               "tensor shape"
    prop* %stride => i64              "tensor stride"
    prop %addrspace => @address_space "address space"
    cxx "static auto canonical_stride(array_view<std::int64_t> shape) -> std::vector<std::int64_t>;"
    cxx "inline auto dim() const -> std::int64_t { return shape_.size(); }"
    cxx "inline auto shape(std::int64_t i) const -> std::int64_t { return shape_[i]; }"
    cxx "inline auto stride(std::int64_t i) const -> std::int64_t { return stride_[i]; }"
    cxx "auto is_dynamic_shape() const -> bool;"
    cxx "auto is_dynamic_stride() const -> bool;"
    cxx "auto is_dynamic() const -> bool;"
    cxx "auto is_canonical_stride() const -> bool;"
    cxx "auto element_alignment() const -> std::int32_t;"
    cxx "auto size_in_bytes() const -> std::int64_t;"
}

type @void "Void type" {}
